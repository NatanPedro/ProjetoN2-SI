<?xml version="1.0"?>
<doc>
    <assembly>
        <name>itext.pdf2data</name>
    </assembly>
    <members>
        <member name="T:iText.Pdf2Data.Actions.Data.Pdf2DataProductData">
            <summary>
            Stores an instance of
            <see cref="T:iText.Commons.Actions.Data.ProductData"/>
            related to pdf2Data module.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Actions.Data.Pdf2DataProductData.GetInstance">
            <summary>
            Getter for an instance of
            <see cref="T:iText.Commons.Actions.Data.ProductData"/>
            related to pdf2Data module.
            </summary>
            <returns>pdf2Data product description</returns>
        </member>
        <member name="T:iText.Pdf2Data.Actions.Events.Pdf2DataProductEvent">
            <summary>Class represents events registered in pdf2Data module.</summary>
        </member>
        <member name="F:iText.Pdf2Data.Actions.Events.Pdf2DataProductEvent.RECOGNIZE_PDF">
            <summary>Recognize pdf event type.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Actions.Events.Pdf2DataProductEvent.#ctor(iText.Commons.Actions.Sequence.SequenceId,iText.Commons.Actions.Contexts.IMetaInfo,System.String,iText.Commons.Actions.Confirmations.EventConfirmationType)">
            <summary>Creates an event associated with a general identifier and additional metadata.</summary>
            <param name="sequenceId">is an identifier associated with the event</param>
            <param name="metaInfo">is an additional meta info</param>
            <param name="eventType">is a string description of the event</param>
        </member>
        <member name="M:iText.Pdf2Data.Actions.Events.Pdf2DataProductEvent.CreateRecognizePdfEvent(iText.Commons.Actions.Sequence.SequenceId,iText.Commons.Actions.Contexts.IMetaInfo)">
            <summary>Creates a recognize-pdf event which is associated with a general identifier and additional metadata.
                </summary>
            <param name="sequenceId">is an identifier associated with the event</param>
            <param name="metaInfo">is an additional meta info</param>
            <returns>the recognize-pdf event</returns>
        </member>
        <member name="M:iText.Pdf2Data.Actions.Events.Pdf2DataProductEvent.CreateCheckRecognizePdfEvent(iText.Commons.Actions.Sequence.SequenceId,iText.Commons.Actions.Contexts.IMetaInfo)">
            <summary>Creates a check-recognize-pdf event which is associated with a general identifier and additional metadata.
                </summary>
            <param name="sequenceId">is an identifier associated with the event</param>
            <param name="metaInfo">is an additional meta info</param>
            <returns>the preview-pdf event</returns>
        </member>
        <member name="T:iText.Pdf2Data.Converters.TemplateConverter">
            <summary>
            Class for converting
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            to the latest version.
            </summary>
        </member>
        <member name="F:iText.Pdf2Data.Converters.TemplateConverter.LATEST_VERSION_CONVERTER">
            <summary>Latest template version converter.</summary>
            <remarks>Latest template version converter. Should be updated, when converter for next version is introduced.
                </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Converters.TemplateConverter.GetTemplateLatestVersion">
            <summary>Get the latest JSON template version.</summary>
            <returns>the latest JSON template version</returns>
        </member>
        <member name="M:iText.Pdf2Data.Converters.TemplateConverter.EnsureTemplateMatchesLatestVersion(iText.Pdf2Data.Dto.Json.Templates.TemplateDTO)">
            <summary>Check that passed template has the latest version.</summary>
            <remarks>Check that passed template has the latest version. Update template entity, if necessary.</remarks>
            <param name="templateToUpdate">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            entity to check
            </param>
            <returns>
            updated
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            entity
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Converters.Versions.AbstractVersionConverter">
            <summary>
            Parent class for
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            converters.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Converters.Versions.AbstractVersionConverter.GetVersionAfterUpdate">
            <summary>
            Get
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            version after applied converter.
            </summary>
            <returns>
            new
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            version
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Converters.Versions.AbstractVersionConverter.ConvertTemplate(iText.Pdf2Data.Dto.Json.Templates.TemplateDTO)">
            <summary>
            Convert passed
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            to the latest version.
            </summary>
            <param name="templateToUpdate">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            to update
            </param>
            <returns>updated template</returns>
        </member>
        <member name="M:iText.Pdf2Data.Converters.Versions.AbstractVersionConverter.GetPreviousVersionConverter">
            <summary>
            Gets
            <see cref="T:iText.Pdf2Data.Converters.Versions.AbstractVersionConverter"/>
            for previous template version.
            </summary>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Converters.Versions.AbstractVersionConverter"/>
            for previous template version
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Converters.Versions.Major1Minor2Patch0VersionConverter">
            <summary>Converter to 1.2.0 version.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Converters.Versions.Major1Minor2Patch0VersionConverter.GetInstance">
            <summary>
            Get instance of
            <see cref="T:iText.Pdf2Data.Converters.Versions.Major1Minor2Patch0VersionConverter"/>.
            </summary>
            <returns>
            instance of
            <see cref="T:iText.Pdf2Data.Converters.Versions.Major1Minor2Patch0VersionConverter"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Converters.Versions.Major1Minor2Patch0VersionConverter.UpdatePatternSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO,System.Boolean)">
            <summary>
            Update
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO"/>
            to 1.2.0 version.
            </summary>
            <param name="toUpdate">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO"/>
            to update
            </param>
            <returns>
            updated
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Converters.Versions.Major1Minor2Patch0VersionConverter.UpdateParagraphSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO,System.Boolean)">
            <summary>
            Update
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO"/>
            to 1.2.0 version.
            </summary>
            <param name="toUpdate">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO"/>
            to update
            </param>
            <returns>
            updated
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO"/>
            instance
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Converters.Versions.Major1Minor3Patch0VersionConverter">
            <summary>Converter to 1.3.0 version.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Converters.Versions.Major1Minor3Patch0VersionConverter.GetInstance">
            <summary>
            Get instance of
            <see cref="T:iText.Pdf2Data.Converters.Versions.Major1Minor3Patch0VersionConverter"/>.
            </summary>
            <returns>
            instance of
            <see cref="T:iText.Pdf2Data.Converters.Versions.Major1Minor3Patch0VersionConverter"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Converters.Versions.Major1Minor3Patch0VersionConverter.UpdatePickerSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO,System.Boolean)">
            <summary>
            Update
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO"/>
            to 1..0 version.
            </summary>
            <param name="toUpdate">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO"/>
            to update
            </param>
            <returns>
            updated
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Converters.Versions.Major1Minor3Patch0VersionConverter.UpdateImageSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO,System.Boolean)">
            <summary>
            Update
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO"/>
            to 1..0 version.
            </summary>
            <param name="toUpdate">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO"/>
            to update
            </param>
            <returns>
            updated
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO"/>
            instance
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Converters.Versions.Major1Minor4Patch0VersionConverter">
            <summary>Converter to 1.4.0 version.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Detector.ParagraphFinder.GetSmartAverageSpace(System.Single[],System.Int32,System.Int32,System.Boolean)">
            <summary>For columns return mean of spaces between columns.</summary>
            <remarks>
            For columns return mean of spaces between columns.
            Return -1 if between low ccord and top coord only one block of text.
            </remarks>
            <param name="freqArr">Array with frequencies for any coord.</param>
            <param name="low">Low threshold.</param>
            <param name="top">Top threshold.</param>
            <param name="isYArray">True if y-coord is considered.</param>
            <returns/>
        </member>
        <member name="M:iText.Pdf2Data.Detector.PatternSearching.Crop(iText.Pdf2Data.Structure.Text.TPIParagraph,System.Int32,System.Int32)">
            <summary>Crops paragraph to text selected by regex.</summary>
            <param name="paragraph">original paragraph before regex selection</param>
            <param name="start">start position of text selected by regex</param>
            <param name="end">end position of text selected by regex</param>
            <returns>cropped paragraph, which contains only that text, which was selected with regex</returns>
        </member>
        <member name="M:iText.Pdf2Data.Detector.PatternSearching.AddPattern(iText.Pdf2Data.Structure.TPIGroup,System.Int32,System.Int32)">
            <summary>Crops text in TPI group to fit text selected by regex.</summary>
            <param name="matchedGroup">TPI group which contains text selected by regex</param>
            <param name="start">start position of selected text inside this TPI group</param>
            <param name="end">end position of selected text inside this TPI group</param>
            <returns>cropped TPI group which contains only text selected by regex</returns>
        </member>
        <member name="T:iText.Pdf2Data.Detector.Table.Border.TableUtils">
            <summary>Class with some util methods for tables in pdf documents.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Border.TableUtils.GetAlign(iText.Pdf2Data.Structure.Geom.Rectangle,iText.Pdf2Data.Structure.Geom.Rectangle,System.Double)">
            <summary>Detects the possible horizontal align properties for the content inside the cell.</summary>
            <param name="cellBox">
            bounding box of the cell (or column), that contains the content,
            top and bottom coordinates are ignored
            </param>
            <param name="contentBox">
            bounding box of the content to get the align for,
            top and bottom coordinates are ignored
            </param>
            <param name="threshold">non-negative threshold, that will be used in align detection</param>
            <returns>
            an integer (bitset), which contains a combination of LEFT_ALIGN_FLAG, CENTER_ALIGN_FLAG and
            RIGHT_ALIGN_FLAG.
            </returns>
        </member>
        <member name="F:iText.Pdf2Data.Detector.Table.Cluster.InitialClusters.initialTable">
            <summary>Optional.</summary>
            <remarks>Optional. A preprocessed table, which is here to provide context for the operations.</remarks>
        </member>
        <member name="T:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTable">
            <summary>Class, which contains preprocessing information from table detection.</summary>
            <remarks>Class, which contains preprocessing information from table detection. Immutable.</remarks>
        </member>
        <member name="F:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTable.groups">
            <summary>Groups, which contain potential table data.</summary>
        </member>
        <member name="F:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTable.headerRow">
            <summary>Table header row found during preprocessing.</summary>
            <remarks>Table header row found during preprocessing. Can omit table header cell split data.</remarks>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTable.#ctor(System.Collections.Generic.IList{iText.Pdf2Data.Structure.TPIGroup},iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow)">
            <summary>
            Creates new instance of
            <see cref="T:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTable"/>
            with passed parameters.
            </summary>
            <param name="groups">groups, which contain potential table data</param>
            <param name="headerRow">table header row found during preprocessing</param>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTable.GetGroups">
            <summary>Gets groups with potential table data.</summary>
            <returns>groups with potential table data</returns>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTable.GetHeaderRow">
            <summary>Gets table header row from preprocessing.</summary>
            <returns>table header row from preprocessing</returns>
        </member>
        <member name="T:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableCell">
            <summary>Class contains initial table cell information from a preprocessed table.</summary>
            <remarks>Class contains initial table cell information from a preprocessed table. Immutable.</remarks>
        </member>
        <member name="F:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableCell.contentBox">
            <summary>Bounding box, which contains the cell content.</summary>
        </member>
        <member name="F:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableCell.areaBox">
            <summary>Bounding box, which contains the cell content and the surrounding free area.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableCell.#ctor(iText.Pdf2Data.Structure.Geom.Rectangle)">
            <summary>
            Creates new instance of
            <see cref="T:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableCell"/>
            with passed parameter.
            </summary>
            <param name="contentBox">bounding box, which contains the cell content</param>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableCell.#ctor(iText.Pdf2Data.Structure.Geom.Rectangle,iText.Pdf2Data.Structure.Geom.Rectangle)">
            <summary>
            Creates new instance of
            <see cref="T:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableCell"/>
            with passed parameters.
            </summary>
            <param name="contentBox">bounding box, which contains the cell content</param>
            <param name="areaBox">bounding box, which contains the cell content and the surrounding free area.</param>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableCell.GetContentBox">
            <summary>Gets the content box.</summary>
            <returns>content box</returns>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableCell.GetAreaBox">
            <summary>Gets the area box.</summary>
            <returns>area box</returns>
        </member>
        <member name="T:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow">
            <summary>Class contains initial table row information from a preprocessed table.</summary>
            <remarks>Class contains initial table row information from a preprocessed table. Immutable.</remarks>
        </member>
        <member name="F:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.contentBox">
            <summary>Bounding box, which contains the row content.</summary>
        </member>
        <member name="F:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.areaBox">
            <summary>Bounding box, which contains the row content <i>and</i> the surrounding free area.</summary>
        </member>
        <member name="F:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.cells">
            <summary>Optional.</summary>
            <remarks>
            Optional. Table cells, that the row contains. If empty, then cell splitting information is
            not available for this row.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.#ctor(iText.Pdf2Data.Structure.Geom.Rectangle)">
            <summary>
            Creates new instance of
            <see cref="T:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow"/>
            with passed parameter.
            </summary>
            <param name="contentBox">bounding box, which contains the row content</param>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.#ctor(iText.Pdf2Data.Structure.Geom.Rectangle,iText.Pdf2Data.Structure.Geom.Rectangle)">
            <summary>
            Creates new instance of
            <see cref="T:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow"/>
            with passed parameters.
            </summary>
            <param name="contentBox">bounding box, which contains the row content</param>
            <param name="areaBox">bounding box, which contains the row content and the surrounding free area.</param>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.#ctor(System.Collections.Generic.IList{iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableCell})">
            <summary>
            Creates new instance of
            <see cref="T:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow"/>
            with passed parameter.
            </summary>
            <param name="cells">table cells, that the row contains</param>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.GetContentBox">
            <summary>Gets the content box.</summary>
            <returns>context box</returns>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.GetAreaBox">
            <summary>Gets the area box.</summary>
            <returns>area box</returns>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.HasCells">
            <summary>Checks if the table row has cells.</summary>
            <returns>
            
            <see langword="true"/>
            if table row contains cells,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.GetCells">
            <summary>Gets table row cells.</summary>
            <returns>table row cells</returns>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.GetFirstCell">
            <summary>Gets first cell of table row.</summary>
            <returns>first cell of table row</returns>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.InitialTableRow.GetLastCell">
            <summary>Gets last cell of table row.</summary>
            <returns>last cell of table row</returns>
        </member>
        <member name="F:iText.Pdf2Data.Detector.Table.Cluster.Structure.Table.initialTable">
            <summary>InitialTable object, which was used to create this table.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Detector.Table.Cluster.Structure.VertexGroup.IsEmpty">
            <summary>
            Returns
            <see langword="true"/>
            if this vertex group contains no vertices.
            </summary>
            <returns>
            
            <see langword="true"/>
            if this vertex group contains no vertices
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO">
            <summary>Class which contain paths to active template and linked resources.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO.#ctor(System.String,System.String,iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO"/>
            with passed parameters.
            </summary>
            <param name="templatePath">path to active template file</param>
            <param name="referencePdfPath">if present,represent path to reference pdf file</param>
            <param name="legacyTemplate">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO"/>
            if present, describes information about templateV3 file which
            was converted to template archive
            </param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO.GetTemplatePath">
            <summary>Gets path to active template file.</summary>
            <returns>path to active template file</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO.SetTemplatePath(System.String)">
            <summary>Sets path to active template file.</summary>
            <param name="templatePath">path to set</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO.GetReferencePdfPath">
            <summary>Gets path to reference pdf file.</summary>
            <returns>path to reference pdf file</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO.SetReferencePdfPath(System.String)">
            <summary>Sets path to reference pdf file.</summary>
            <param name="referencePdfPath">path to reference pdf file</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO.GetLegacyTemplate">
            <summary>
            Gets inner
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO"/>
            object.
            </summary>
            <returns>
            inner
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO"/>
            object
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO.SetLegacyTemplate(iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO)">
            <summary>
            Sets inner
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO"/>
            object.
            </summary>
            <param name="legacyTemplate">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO"/>
            to set
            </param>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Archive.ArchiveMetaDTO">
            <summary>Class which represents metadata of template archive.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ArchiveMetaDTO.#ctor(System.String,System.String,iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.ArchiveMetaDTO"/>
            with passed parameters.
            </summary>
            <param name="templateArchiveVersion">the template archive version</param>
            <param name="createdAt">
            string in ISO-8601 format, which represents date when the template archive file has
            been created
            </param>
            <param name="activeTemplate">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO"/>
            containing the paths to active template and linked
            resources
            </param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ArchiveMetaDTO.GetTemplateArchiveVersion">
            <summary>Gets template archive version.</summary>
            <returns>template archive version</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ArchiveMetaDTO.SetTemplateArchiveVersion(System.String)">
            <summary>Sets template archive version.</summary>
            <param name="templateArchiveVersion">template archive version to set</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ArchiveMetaDTO.GetCreatedAt">
            <summary>Gets string in ISO-8601 format, which represent creation date of template archive.</summary>
            <returns>string, which represent creation date of template archive</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ArchiveMetaDTO.SetCreatedAt(System.String)">
            <summary>Sets creation date of template archive.</summary>
            <param name="createdAt">string in ISO-8601 format, which represent creation date of template archive</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ArchiveMetaDTO.GetActiveTemplate">
            <summary>
            Gets
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO"/>
            of current archive metaobject.
            </summary>
            <returns>
            inner
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO"/>
            object
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.ArchiveMetaDTO.SetActiveTemplate(iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO)">
            <summary>
            Sets
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO"/>
            object.
            </summary>
            <param name="activeTemplate">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.ActiveTemplateDTO"/>
            to set
            </param>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Archive.Enums.TemplateFormat">
            <summary>Enumeration of possible template types.</summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO">
            <summary>Class which contains information of templateV3 file which was converted to template archive.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO.#ctor(System.String,System.Nullable{iText.Pdf2Data.Dto.Json.Archive.Enums.TemplateFormat},System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO"/>
            with passed parameters.
            </summary>
            <param name="path">path to templateV3 file</param>
            <param name="format">format of templateV3 file</param>
            <param name="formatVersion">version of templateV3 file</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO.GetPath">
            <summary>Gets path to templateV3 file.</summary>
            <returns>path to templateV3 file</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO.SetPath(System.String)">
            <summary>Sets path to templateV3 file.</summary>
            <param name="path">path to set</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO.GetFormat">
            <summary>Gets format of templateV3 file.</summary>
            <returns>format of templateV3 file</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO.SetFormat(System.Nullable{iText.Pdf2Data.Dto.Json.Archive.Enums.TemplateFormat})">
            <summary>Sets format of templateV3 file.</summary>
            <param name="format">format to set</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO.GetFormatVersion">
            <summary>Gets version of templateV3 file.</summary>
            <returns>version of templateV3 file</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Archive.LegacyTemplateDTO.SetFormatVersion(System.String)">
            <summary>Sets format of templateV3 file.</summary>
            <param name="formatVersion">format of templateV3 file</param>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.AlignSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO.#ctor(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.AlignFilter},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="alignFilter">defines which align to use</param>
            <param name="left">left align boundary</param>
            <param name="right">right align boundary</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO.GetAlignFilter">
            <summary>Gets which align is used.</summary>
            <returns>align which used</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO.GetLeft">
            <summary>Gets left align boundary.</summary>
            <returns>left align boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO.GetRight">
            <summary>Gets right align boundary.</summary>
            <returns>right align boundary</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.BarcodeSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO.#ctor(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.BarcodeFormat},iText.Pdf2Data.Dto.Json.Templates.RectangleDTO)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="format">barcode format to match</param>
            <param name="barcodeLocation">location of barcode selector</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO.GetFormat">
            <summary>Gets barcode format to match.</summary>
            <returns>barcode format to match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO.GetBarcodeLocation">
            <summary>Gets location of barcode selector.</summary>
            <returns>location of barcode selector</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.BoundarySelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},iText.Pdf2Data.Dto.Json.Templates.RectangleDTO)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO"/>
            with passed fields.
            </summary>
            <param name="topUsed">
            
            <see langword="true"/>
            if top boundary used,
            <see langword="false"/>
            otherwise
            </param>
            <param name="bottomUsed">
            
            <see langword="true"/>
            if bottom boundary used,
            <see langword="false"/>
            otherwise
            </param>
            <param name="leftUsed">
            
            <see langword="true"/>
            if left boundary used,
            <see langword="false"/>
            otherwise
            </param>
            <param name="rightUsed">
            
            <see langword="true"/>
            if right boundary used,
            <see langword="false"/>
            otherwise
            </param>
            <param name="area">location of selector</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO.GetTopUsed">
            <summary>Gets is top boundary used.</summary>
            <returns>
            
            <see langword="true"/>
            if used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO.GetBottomUsed">
            <summary>Gets is bottom boundary used.</summary>
            <returns>
            
            <see langword="true"/>
            if used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO.GetRightUsed">
            <summary>Gets is right boundary used.</summary>
            <returns>
            
            <see langword="true"/>
            if used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO.GetLeftUsed">
            <summary>Gets is left boundary used.</summary>
            <returns>
            
            <see langword="true"/>
            if used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO.GetArea">
            <summary>Gets location of selector.</summary>
            <returns>selector location</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.CropSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO.#ctor(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.CropVertically},System.Nullable{System.Int32},System.Collections.Generic.IList{iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO"/>
            with passed fields.
            </summary>
            <param name="cropVertically">selects where the cropping will be done</param>
            <param name="areaIndex">selects which area to choose</param>
            <param name="areaSelectors">list of selectors, which finds crop area</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO.GetCropVertically">
            <summary>Gets crop vertically.</summary>
            <returns>crop vertically</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO.GetAreaIndex">
            <summary>Gets area index.</summary>
            <returns>area index</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO.GetAreaSelectors">
            <summary>Gets area selectors.</summary>
            <returns>area selectors</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.RejectSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.RejectSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Composite.RejectSelectorDTO.#ctor(System.Collections.Generic.IList{iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.RejectSelectorDTO"/>
            with passed fields.
            </summary>
            <param name="rejectBy">list of selectors, which finds reject area</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Composite.RejectSelectorDTO.GetRejectBy">
            <summary>Gets rejectBy selectors.</summary>
            <returns>rejectBy selectors</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Composite.SelectorBenchSelectorDTO.#ctor(System.String,System.Collections.Generic.IList{iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.SelectorBenchSelectorDTO"/>
            with passed fields.
            </summary>
            <param name="subType">subType of selector bench</param>
            <param name="selectors">list of selectors of selector bench</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Composite.SelectorBenchSelectorDTO.GetSubType">
            <summary>Gets subType.</summary>
            <returns>subType</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Composite.SelectorBenchSelectorDTO.GetSelectors">
            <summary>Gets inner selectors.</summary>
            <returns>inner selectors</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.AlignFilter">
            <summary>
            Enumeration of possible align filters supported in
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO"/>.
            </summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.BarcodeFormat">
            <summary>
            Enumeration of possible barcode formats supported in
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO"/>.
            </summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.CharSpacing">
            <summary>
            Enumeration of possible char spacing supported in
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO"/>.
            </summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.CropVertically">
            <summary>
            Enumeration of possible crop destinations supported in
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO"/>.
            </summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles">
            <summary>
            Enumeration of possible font styles supported in
            <see cref="!:com.itextpdf.pdf2data.dto.json.selectors.FontStyleSelectorDTO"/>.
            </summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.LineSpacing">
            <summary>
            Enumeration of possible line spacing supported in
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO"/>.
            </summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType">
            <summary>
            Enumeration of possible grouping type supported in
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO"/>.
            </summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.Side">
            <summary>
            Enumeration of possible side for relation supported in
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO"/>.
            </summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.TableHeadersFormat">
            <summary>
            Enumeration of possible headers format supported in
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO"/>
            and
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO"/>.
            </summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontColorSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO.#ctor(System.String,System.Nullable{System.Double})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="color">color of selector</param>
            <param name="tolerance">tolerance of selector</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO.GetColor">
            <summary>Gets color of selector.</summary>
            <returns>selector color</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO.GetTolerance">
            <summary>Gets tolerance of selector.</summary>
            <returns>selector tolerance</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontFamilySelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontFamilySelectorDTO.#ctor(System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontFamilySelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="fontName">font name of selector</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontFamilySelectorDTO.GetFontName">
            <summary>Gets font name of selector.</summary>
            <returns>selector font name</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO.#ctor(iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontFamilySelectorDTO,iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSizeSelectorDTO,iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontStyleSelectorDTO,System.String,iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,System.Collections.Generic.IList{System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles}})">
            <param name="fontFamily">font family descriptor to select</param>
            <param name="fontSize">font size descriptor to select</param>
            <param name="fontStyle">font style descriptor to select</param>
            <param name="family">font name to select</param>
            <param name="size">font size to select</param>
            <param name="styles">font styles to select</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO.GetFontFamily">
            <summary>
            Gets font family descriptor of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>.
            </summary>
            <returns>font family descriptor</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO.GetFontSize">
            <summary>
            Gets font size descriptor of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>.
            </summary>
            <returns>font size descriptor</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO.GetFontStyle">
            <summary>
            Gets font style descriptor of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>.
            </summary>
            <returns>font style descriptor</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO.GetFamily">
            <summary>
            Gets font name of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>.
            </summary>
            <returns>font name</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO.GetSize">
            <summary>
            Gets font size of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>.
            </summary>
            <returns>font size</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO.GetStyles">
            <summary>
            Gets font styles of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>.
            </summary>
            <returns>
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles?"/>
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSizeSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSizeSelectorDTO.#ctor(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSizeSelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="size">font size or size interval to select.</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSizeSelectorDTO.GetSize">
            <summary>Gets font size or size interval for selection.</summary>
            <returns>font size or size interval for selection</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontStyleSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontStyleSelectorDTO.#ctor(System.Collections.Generic.IList{System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles}})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontStyleSelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="styles">font styles list to select</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontStyleSelectorDTO.GetStyles">
            <summary>Gets font styles list to select.</summary>
            <returns>font style list to select</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.GroupSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Postprocessing.GroupSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.GroupSelectorDTO.#ctor(System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.GroupSelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="parentName">name of parent group</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.GroupSelectorDTO.GetParentName">
            <summary>Gets name of parent group.</summary>
            <returns>parent group name</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.ImageSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO.#ctor(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,System.Collections.Generic.IList{iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO},iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="index">range for match (deprecated)</param>
            <param name="indexes">list of range groups specifying images to select</param>
            <param name="width">image width to match</param>
            <param name="height">image height to match</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO.GetIndex">
            <summary>Gets range for match.</summary>
            <returns>ramge for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO.GetIndexes">
            <summary>Gets list of range groups specifying images to select.</summary>
            <returns>ramge for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO.GetWidth">
            <summary>Gets image width for match.</summary>
            <returns>image width for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO.GetHeight">
            <summary>Gets image height for match.</summary>
            <returns>image height for match</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.LineGrouper"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO.#ctor(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.CharSpacing})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="charSpacing">line spacing coefficient</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO.GetCharSpacing">
            <summary>Gets line spacing coefficient.</summary>
            <returns>line spacing coefficient</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.PageSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.PageSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.PageSelectorDTO.#ctor(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PageSelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="pageNumber">pages for match</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.PageSelectorDTO.GetPageNumber">
            <summary>Gets pages for match.</summary>
            <returns>pages for match</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO.#ctor(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.LineSpacing},System.String,System.Collections.Generic.IList{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="lineSpacing">line spacing coefficient</param>
            <param name="paragraphName">paragraph name</param>
            <param name="paragraphNames">paragraph names</param>
            <param name="runningText">if true paragraph sentence delimiters will be spaces, \n otherwise</param>
            <param name="excludeParagraphName">if true, paragraph name will be excluded in extraction results, included otherwise
                </param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO.GetLineSpacing">
            <summary>Gets line spacing coefficient.</summary>
            <returns>line spacing coefficient</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO.GetParagraphName">
            <summary>Gets paragraph name.</summary>
            <returns>paragraph name</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO.GetParagraphNames">
            <summary>Gets paragraph name list.</summary>
            <returns>paragraph name list</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO.GetRunningText">
            <summary>Gets whether paragraph sentences delimiters are spaces or \n.</summary>
            <returns>if true paragraph sentence delimiters will be spaces, \n otherwise</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO.GetExcludeParagraphName">
            <summary>Gets whether paragraph name will be excluded in extraction results or not.</summary>
            <returns>if true paragraph name will be excluded, will be included otherwise</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.DateSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.DateSelector"/>
            in json
            format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.DateSelectorDTO.#ctor(System.String,System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.DateSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="pattern">date pattern to use</param>
            <param name="evaluatedPattern">evaluated pattern to be used in processing</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.DateSelectorDTO.GetPattern">
            <summary>Gets date pattern that is used.</summary>
            <returns>date pattern that is used</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IBANSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.IBANSelector"/>
            in json
            format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IBANSelectorDTO.#ctor(System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IBANSelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="evaluatedPattern">pattern to use</param>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IntegerSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.IntegerSelector"/>
            in json
            format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IntegerSelectorDTO.#ctor(System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IntegerSelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="evaluatedPattern">pattern to use</param>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="prefix">pattern prefix</param>
            <param name="suffix">pattern suffix</param>
            <param name="prefixes">pattern prefix list</param>
            <param name="suffixes">pattern suffix list</param>
            <param name="innerBasePattern">pattern middle part</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO.GetPrefix">
            <summary>Gets pattern prefix.</summary>
            <returns>pattern prefix</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO.GetSuffix">
            <summary>Gets pattern suffix.</summary>
            <returns>pattern suffix</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO.GetPrefixes">
            <summary>Gets pattern prefix list.</summary>
            <returns>pattern prefix list</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO.GetSuffixes">
            <summary>Gets pattern suffix list.</summary>
            <returns>pattern suffix list</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO.GetInnerBasePattern">
            <summary>Gets pattern middle part.</summary>
            <returns>pattern middle part</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PriceSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.PriceSelector"/>
            in json
            format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PriceSelectorDTO.#ctor(System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PriceSelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="evaluatedPattern">pattern to use</param>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.RegExpSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO.#ctor(System.Collections.Generic.IList{System.String},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="patterns">list of patterns to match</param>
            <param name="fit">
            defines whether the patterns should be auto-evaluated. Should be
            <see langword="false"/>
            or missing
            for processed selector
            </param>
            <param name="selectLine">line index to select, shall be less than patterns size</param>
            <param name="checkLocation">
            
            <see langword="true"/>
            if check location should be applied,
            <see langword="false"/>
            otherwise
            </param>
            <param name="leftThreshold">location left threshold</param>
            <param name="rightThreshold">location right threshold</param>
            <param name="keyword">keyword</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO.GetPatterns">
            <summary>Gets list of patterns to match.</summary>
            <returns>patterns list</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO.GetFit">
            <summary>Gets, whether the patterns should be auto-evaluated.</summary>
            <returns>
            
            <see langword="false"/>
            if patterns should be auto-evaluated,
            <see langword="true"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO.GetSelectLine">
            <summary>Gets line index to select.</summary>
            <returns>line index to select</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO.GetCheckLocation">
            <summary>Gets, whether the check location should be applied.</summary>
            <returns>
            
            <see langword="true"/>
            if check location should be applied,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO.GetLeftThreshold">
            <summary>Gets location left threshold.</summary>
            <returns>location left threshold</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO.GetRightThreshold">
            <summary>Gets location right threshold.</summary>
            <returns>location right threshold</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO.GetKeyword">
            <summary>Gets keyword.</summary>
            <returns>keyword</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.SimplePatternSelectorDTO">
            <summary>Parent class for simple pattern based selectors.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.SimplePatternSelectorDTO.#ctor(System.String,System.String)">
            <summary>Constructor which used in successors for setting selector type and pattern that will be used.</summary>
            <param name="selectorType">type of selector</param>
            <param name="evaluatedPattern">pattern to use</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.SimplePatternSelectorDTO.GetEvaluatedPattern">
            <summary>Gets pattern that is used.</summary>
            <returns>pattern that is used</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.TimeSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.TimeSelector"/>
            in json
            format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.TimeSelectorDTO.#ctor(System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.TimeSelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="evaluatedPattern">pattern to use</param>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.VATSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.VATSelector"/>
            in json
            format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Patterns.VATSelectorDTO.#ctor(System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.VATSelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="evaluatedPattern">pattern to use</param>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Picker"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO.#ctor(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,System.Collections.Generic.IList{iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO},System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType})">
            <summary>
            Constructs a new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO"/>
            with the given index and group type.
            </summary>
            <param name="index">range for match (deprecated)</param>
            <param name="indexes">list of range groups specifying elements to select</param>
            <param name="groupType">grouping type</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO.GetIndex">
            <summary>Gets range for match.</summary>
            <returns>range for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO.GetIndexes">
            <summary>Gets list of range groups specifying elements to select.</summary>
            <returns>ranges for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO.GetGroupType">
            <summary>Gets the grouping type.</summary>
            <returns>grouping type</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO">
            <summary>Class which represents range structure in dto classes.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO"/>
            with passed parameters.
            </summary>
            <param name="start">range group start index</param>
            <param name="end">range group end index</param>
            <param name="segmentSize">specifies the amount of elements to pick up before the gap</param>
            <param name="segmentGap">specifies the amount of elements to skip before the next picked group segment</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO.GetStart">
            <summary>Gets range group start index.</summary>
            <returns>range group start index</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO.GetEnd">
            <summary>Gets range group end index.</summary>
            <returns>range group end index</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO.GetSegmentSize">
            <summary>Gets the amount of elements to pick up before the gap.</summary>
            <returns>the amount of elements to pick up before the gap</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO.GetSegmentGap">
            <summary>Gets the amount of elements to skip before the next picked group segment.</summary>
            <returns>the amount of elements to skip before the next picked group segment</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO">
            <summary>Parent class for complex structures in dto classes.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO.#ctor(System.String)">
            <summary>Constructor which is used in successors for setting structure type.</summary>
            <param name="structureType">structure type</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO.GetStructureType">
            <summary>Gets structure type.</summary>
            <returns>structure type</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.ComplexStructureConstants">
            <summary>Class contains constants which are used in complex structures.</summary>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.NamedStructureDTO">
            <summary>Class which represents named structure in dto classes.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Ranges.NamedStructureDTO.#ctor(System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.NamedStructureDTO"/>
            with passed property.
            </summary>
            <param name="name">name value</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Ranges.NamedStructureDTO.GetName">
            <summary>Gets name value.</summary>
            <returns>name value</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO">
            <summary>Class which represents range structure in dto classes.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO.#ctor(System.String,System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO"/>
            with passed parameters.
            </summary>
            <param name="min">min interval value</param>
            <param name="max">max interval value</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO.GetMin">
            <summary>Gets min interval value.</summary>
            <returns>min interval value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO.GetMax">
            <summary>Gets max interval value.</summary>
            <returns>max interval value</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.StaticStructureDTO">
            <summary>Class which represents static structure in dto classes.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Ranges.StaticStructureDTO.#ctor(System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.StaticStructureDTO"/>
            with passed parameter.
            </summary>
            <param name="value">fixed value</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Ranges.StaticStructureDTO.GetValue">
            <summary>Gets fixed value.</summary>
            <returns>fixed value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Ranges.UnknownComplexStructureDTO.#ctor(System.String)">
            <summary>Constructor which is used in successors for setting structure type.</summary>
            <param name="structureType">structure type</param>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.RelativeBoundarySelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO.#ctor(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.Side})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO"/>
            with passed parameter.
            </summary>
            <param name="side">side for relation</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO.GetSide">
            <summary>Gets side for relation.</summary>
            <returns>side for relation</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO">
            <summary>Parent class for all selectors json representations.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO.#ctor(System.String)">
            <summary>Constructor which used in successors for setting selector type.</summary>
            <param name="selectorType">selector type</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO.GetSelectorType">
            <summary>Gets selector type.</summary>
            <returns>selector type</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO.#ctor(System.Collections.Generic.IList{System.String},System.Nullable{System.Int32},iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.TableHeadersFormat})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="headers">headers of table to match</param>
            <param name="determiningColumn">determining column for cluster algorithm</param>
            <param name="row">row or row range for match</param>
            <param name="column">column or column range for match</param>
            <param name="format">specified headers format</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO.GetHeaders">
            <summary>Gets headers of table to match.</summary>
            <returns>headers of table to match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO.GetDeterminingColumn">
            <summary>Gets determining column for cluster algorithm.</summary>
            <returns>determining column for cluster algorithm</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO.GetRow">
            <summary>Gets row or row range for match.</summary>
            <returns>row or row range for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO.GetColumn">
            <summary>Gets column or column range for match.</summary>
            <returns>column or column range for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO.GetFormat">
            <summary>Gets specified headers format.</summary>
            <returns>specified headers format</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.FrequencyTableSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO.#ctor(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,iText.Pdf2Data.Dto.Json.Templates.RectangleDTO)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="row">row or row range for match</param>
            <param name="column">column or column range for match</param>
            <param name="frequencyArea">rectangle for frequency algorithm</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO.GetRow">
            <summary>Gets row or row range for match.</summary>
            <returns>row or row range for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO.GetColumn">
            <summary>Gets column or column range for match.</summary>
            <returns>column or column range for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO.GetFrequencyArea">
            <summary>Gets rectangle for frequency algorithm.</summary>
            <returns>rectangle for frequency algorithm</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.TableSelector"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO.#ctor(System.Collections.Generic.IList{System.String},System.Nullable{System.Int32},iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.TableHeadersFormat})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO"/>
            with passed parameters.
            </summary>
            <param name="headers">headers of table to match</param>
            <param name="determiningColumn">determining column for cluster algorithm</param>
            <param name="row">row or row range for match</param>
            <param name="column">column or column range for match</param>
            <param name="format">specified headers format</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO.GetHeaders">
            <summary>Gets headers of table to match.</summary>
            <returns>headers of table to match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO.GetDeterminingColumn">
            <summary>Gets determining column for cluster algorithm.</summary>
            <returns>determining column for cluster algorithm</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO.GetRow">
            <summary>Gets row or row range for match.</summary>
            <returns>row or row range for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO.GetColumn">
            <summary>Gets column or column range for match.</summary>
            <returns>column or column range for match</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO.GetFormat">
            <summary>Gets specified headers format.</summary>
            <returns>specified headers format</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Selectors.UnknownSelectorDTO.#ctor(System.String)">
            <summary>Constructor which used in successors for setting selector type.</summary>
            <param name="selectorType">selector type</param>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Template.DataField"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO.#ctor(System.String,System.String,iText.Pdf2Data.Dto.Json.Templates.PdfLocationDTO,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO"/>
            with passed parameters.
            </summary>
            <param name="name">name of data field</param>
            <param name="referencePdfOrigin">location of data field</param>
            <param name="multipleAllowed">
            
            <see langword="true"/>
            if data field may match more than one occurrence,
            <see langword="false"/>
            otherwise
            </param>
            <param name="zeroAllowed">
            
            <see langword="true"/>
            if data field may match zero occurrence,
            <see langword="false"/>
            otherwise
            </param>
            <param name="selectors">list of selectors related to data field</param>
            <param name="dataType">data field type</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO.GetName">
            <summary>Gets name of data field.</summary>
            <returns>name of data field.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO.GetDataType">
            <summary>Gets type of data field.</summary>
            <returns>type of data field</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO.GetReferencePdfOrigin">
            <summary>Gets location of data field.</summary>
            <returns>location of data field</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO.GetMultipleAllowed">
            <summary>Gets if data field may match more than one occurrence.</summary>
            <returns>
            
            <see langword="true"/>
            if data field may match more than one occurrence,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO.GetZeroAllowed">
            <summary>Gets if data field may match zero occurrence.</summary>
            <returns>
            
            <see langword="true"/>
            if data field may match zero occurrence,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO.GetSelectors">
            <summary>Gets selectors related to current data field.</summary>
            <returns>selectors related to data field</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Templates.PdfLocationDTO">
            <summary>Class which represents location of data field on the defined page.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.PdfLocationDTO.#ctor(System.Nullable{System.Int32},iText.Pdf2Data.Dto.Json.Templates.RectangleDTO)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.PdfLocationDTO"/>
            with passed parameters.
            </summary>
            <param name="page">the page, on which data field is located</param>
            <param name="location">location of data field on the page</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.PdfLocationDTO.GetPage">
            <summary>Gets page, where data field is located.</summary>
            <returns>page, where data field is located</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.PdfLocationDTO.GetLocation">
            <summary>Gets location of data field.</summary>
            <returns>data field location.</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Templates.RectangleDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Structure.Geom.Rectangle"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.RectangleDTO.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.RectangleDTO"/>
            with passed parameters.
            </summary>
            <param name="left">left coordinate of rectangle</param>
            <param name="right">right coordinate of rectangle</param>
            <param name="top">top coordinate of rectangle</param>
            <param name="bottom">bottom coordinate of rectangle</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.RectangleDTO.GetLeft">
            <summary>Gets left coordinate of rectangle.</summary>
            <returns>rectangle left coordinate</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.RectangleDTO.GetRight">
            <summary>Gets right coordinate of rectangle.</summary>
            <returns>rectangle right coordinate</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.RectangleDTO.GetTop">
            <summary>Gets top coordinate of rectangle.</summary>
            <returns>rectangle top coordinate</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.RectangleDTO.GetBottom">
            <summary>Gets bottom coordinate of rectangle.</summary>
            <returns>rectangle bottom coordinate</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Template.Template"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO.#ctor(iText.Pdf2Data.Dto.Json.Templates.TemplateMetaDTO,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IList{iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO})">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            with passed parameters.
            </summary>
            <param name="meta">template meta</param>
            <param name="templateSchemaVersion">template schema version</param>
            <param name="processed">
            
            <see langword="true"/>
            if template is processed,
            <see langword="false"/>
            otherwise
            </param>
            <param name="dataFields">list of data fields</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO.GetMeta">
            <summary>Gets template meta.</summary>
            <returns>template meta</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO.GetTemplateSchemaVersion">
            <summary>Gets template schema version.</summary>
            <returns>template schema version</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO.GetProcessed">
            <summary>Gets is template processed or not.</summary>
            <returns>
            
            <see langword="true"/>
            if template is processed,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO.GetDataFields">
            <summary>Gets data fields from template.</summary>
            <returns>data fields list</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Json.Templates.TemplateMetaDTO">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Template.TemplateMeta"/>
            in json format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.TemplateMetaDTO.#ctor(System.String,System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateMetaDTO"/>
            with passed parameters.
            </summary>
            <param name="name">template name</param>
            <param name="description">template description</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.TemplateMetaDTO.GetDescription">
            <summary>Gets template description.</summary>
            <returns>template description</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Json.Templates.TemplateMetaDTO.GetName">
            <summary>Gets template name.</summary>
            <returns>template name</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Meta.FontMetaXmlResultDTO">
            <summary>Class representing font metadata.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Meta.FontMetaXmlResultDTO.#ctor(System.String,iText.Pdf2Data.Result.Meta.FontStyle,System.String)">
            <summary>Creates an instance of font metadata representation.</summary>
            <param name="fontName">the font name</param>
            <param name="fontStyle">the font style</param>
            <param name="fontColor">the font color</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Meta.FontMetaXmlResultDTO.GetFontName">
            <summary>Get font name.</summary>
            <returns>font name</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Meta.FontMetaXmlResultDTO.GetFontStyle">
            <summary>Get font style.</summary>
            <returns>font style</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Meta.FontMetaXmlResultDTO.GetFontColor">
            <summary>Get font color</summary>
            <returns>font color</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO">
            <summary>Class representing page location metadata.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>Creates an instance of page location metadata representation.</summary>
            <param name="x">the x coordinate on the page</param>
            <param name="y">the y coordinate on the page</param>
            <param name="width">the width of the location</param>
            <param name="height">the height of the location</param>
            <param name="page">the page number</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO.GetX">
            <summary>Get X coordinate on the page.</summary>
            <returns>x coordinate value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO.GetY">
            <summary>The Y coordinate on the page.</summary>
            <returns>y coordinate value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO.GetWidth">
            <summary>Get width of the location.</summary>
            <returns>width value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO.GetHeight">
            <summary>Get height of the location.</summary>
            <returns>height value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO.GetPage">
            <summary>Get page number of the location.</summary>
            <returns>page number</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Value.AbstractValueXmlResultDTO">
            <summary>Common abstract parent for all possible results.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.AbstractValueXmlResultDTO.#ctor(System.String)">
            <summary>Constructor for abstract result.</summary>
            <param name="resultType">the specific result type</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.AbstractValueXmlResultDTO.GetResultType">
            <summary>Get specific result type.</summary>
            <returns>specific result type.</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Value.Group.GroupEntryXmlResultDTO">
            <summary>Class representing single group result's entry.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Group.GroupEntryXmlResultDTO.#ctor(System.String,System.String,System.Collections.Generic.IList{iText.Pdf2Data.Dto.Xml.Result.Value.AbstractValueXmlResultDTO})">
            <summary>Creates an instance of group result's entry representation.</summary>
            <param name="name">group name</param>
            <param name="dataType">the group result's data type</param>
            <param name="results">the list of entry results</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Group.GroupEntryXmlResultDTO.GetDataType">
            <summary>Get group entry data type.</summary>
            <returns>group entry data type</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Group.GroupEntryXmlResultDTO.GetResults">
            <summary>Get group entry results.</summary>
            <returns>list of group entry results</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Value.Group.GroupXmlResultDTO">
            <summary>Class which represents group results.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Group.GroupXmlResultDTO.#ctor(System.Collections.Generic.IList{iText.Pdf2Data.Dto.Xml.Result.Value.Group.GroupEntryXmlResultDTO})">
            <summary>Creates an instance of group result.</summary>
            <param name="entries">the group result entries map</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Group.GroupXmlResultDTO.GetEntries">
            <summary>Get group result entries.</summary>
            <returns>group result entries</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Value.ImageXmlResultDTO">
            <summary>Class which represents image result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.ImageXmlResultDTO.#ctor(iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO,System.String)">
            <summary>Creates an instance of image result.</summary>
            <param name="pageLocationMeta">image page location</param>
            <param name="base64">representation of image bytes as base64 string</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.ImageXmlResultDTO.GetPageLocationMeta">
            <summary>Get image page location</summary>
            <returns>image page location</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.ImageXmlResultDTO.GetBase64">
            <summary>Get image base64 string</summary>
            <returns>image base64 string</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableCellXmlResultDTO">
            <summary>Class which represents single table cell result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableCellXmlResultDTO.#ctor(iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO,iText.Pdf2Data.Dto.Xml.Result.Meta.FontMetaXmlResultDTO,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Creates an instance of table cell result.</summary>
            <param name="pageLocationMeta">cell's page location</param>
            <param name="fontMeta">cell's font metadata</param>
            <param name="rowspan">number of rows to which the current cell spans</param>
            <param name="colspan">number of columns to which the current cell spans</param>
            <param name="content">cell content</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableCellXmlResultDTO.GetPageLocationMeta">
            <summary>Get cell's page location.</summary>
            <returns>cell's page location</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableCellXmlResultDTO.GetFontMeta">
            <summary>Get cell's font metadata.</summary>
            <returns>cell's font metadata</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableCellXmlResultDTO.GetRowspan">
            <summary>Get number of rows to which the current cell spans.</summary>
            <returns>number of rows to which the current cell spans</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableCellXmlResultDTO.GetColspan">
            <summary>Get number of columns to which the current cell spans</summary>
            <returns>number of columns to which the current cell spans</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableCellXmlResultDTO.GetContent">
            <summary>Get cell content.</summary>
            <returns>cell content</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableRowXmlResultDTO">
            <summary>Class which represents table row result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableRowXmlResultDTO.#ctor(iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO,System.Collections.Generic.IList{iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableCellXmlResultDTO})">
            <summary>Creates an instance of table row result.</summary>
            <param name="pageLocationMeta">row page location</param>
            <param name="cells">row cells</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableRowXmlResultDTO.GetPageLocationMeta">
            <summary>Get row's page location.</summary>
            <returns>row's page location</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableRowXmlResultDTO.GetCells">
            <summary>Get row cells.</summary>
            <returns>list of row cells</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableXmlResultDTO">
            <summary>Class which represents table result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableXmlResultDTO.#ctor(System.Collections.Generic.IList{iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO},System.Collections.Generic.IList{iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableRowXmlResultDTO})">
            <summary>Creates an instance of table result.</summary>
            <param name="pageLocationMetas">the list of page locations of the table</param>
            <param name="rows">table rows</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableXmlResultDTO.GetPageLocationMetas">
            <summary>Get table page locations.</summary>
            <returns>table page locations</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.Table.TableXmlResultDTO.GetRows">
            <summary>Get table rows.</summary>
            <returns>table rows list</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Value.TextXmlResultDTO">
            <summary>Class representing text result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.TextXmlResultDTO.#ctor(iText.Pdf2Data.Dto.Xml.Result.Meta.PageLocationMetaXmlResultDTO,iText.Pdf2Data.Dto.Xml.Result.Meta.FontMetaXmlResultDTO,System.String)">
            <summary>Creates an instance of text result.</summary>
            <param name="pageLocationMeta">text page location</param>
            <param name="fontMeta">text font metadata</param>
            <param name="content">text content</param>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.TextXmlResultDTO.GetPageLocationMeta">
            <summary>Get text page location.</summary>
            <returns>text page location</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.TextXmlResultDTO.GetFontMeta">
            <summary>Get text font metadata.</summary>
            <returns>text font metadata</returns>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.TextXmlResultDTO.GetContent">
            <summary>Get text content.</summary>
            <returns>text content.</returns>
        </member>
        <member name="T:iText.Pdf2Data.Dto.Xml.Result.Value.UnknownXmlResultDTO">
            <summary>Class which representing unknown result type.</summary>
            <remarks>
            Class which representing unknown result type.
            <para />
            Mainly used on deserializing the result when unknown result type met.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Dto.Xml.Result.Value.UnknownXmlResultDTO.#ctor(System.String)">
            <summary>Creates an instance of unknown result type.</summary>
            <param name="resultType">unknown result type</param>
        </member>
        <member name="F:iText.Pdf2Data.Exceptions.ExceptionMessageConstant.INVALID_ENUM_PROPERTY">
            <summary>Messages notify about problems during selector enums converting.</summary>
            <remarks>
            Messages notify about problems during selector enums converting. List of params:
            <list type="bullet">
            <item><description> 0th is name of enum property which can not be converted;
            </description></item>
            <item><description> 1th is enum class which cause problems;
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="T:iText.Pdf2Data.Exceptions.InvalidResultException">
            <summary>Exception which is used by pdf2data on recognition result parsing for invalid result structure.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Exceptions.InvalidResultException.#ctor(System.String)">
            <summary>Creates the new instance.</summary>
            <param name="message">the exception message</param>
        </member>
        <member name="T:iText.Pdf2Data.Exceptions.InvalidSegmentException">
            <summary>Exception class for invalid segment.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Exceptions.InvalidSegmentException.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Pdf2Data.Exceptions.InvalidSegmentException"/>.
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="T:iText.Pdf2Data.Exceptions.InvalidTemplateException">
            <summary>Exception class for invalid selector/template dto objects.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Exceptions.InvalidTemplateException.#ctor(System.String)">
            <summary>Creates a new InvalidTemplateException.</summary>
            <param name="message">the detail message</param>
        </member>
        <member name="T:iText.Pdf2Data.Exceptions.TableProcessingException">
            <summary>Exception which is used on table processing by pdf2data for invalid table structures.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Exceptions.TableProcessingException.#ctor(System.String)">
            <summary>Creates the new instance.</summary>
            <param name="message">the exception message</param>
        </member>
        <member name="T:iText.Pdf2Data.Exceptions.TemplateConversionException">
            <summary>Exception class for invalid selector/template objects.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Exceptions.TemplateConversionException.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Pdf2Data.Exceptions.TemplateConversionException"/>.
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="M:iText.Pdf2Data.IO.Content.TPIExtractor.GetAllTPIBunches(System.Int32)">
            <param name="page">1-based page index</param>
            <returns/>
        </member>
        <member name="T:iText.Pdf2Data.IO.Pdf2DataMetaInfoContainer">
            <summary>Class to store metaInfo that will be used for pdf2data operations.</summary>
        </member>
        <member name="M:iText.Pdf2Data.IO.Pdf2DataMetaInfoContainer.#ctor(iText.Commons.Actions.Contexts.IMetaInfo)">
            <summary>Creates Pdf2DataMetaInfoContainer instance with provided meta info.</summary>
            <param name="metaInfo">the meta info</param>
        </member>
        <member name="M:iText.Pdf2Data.IO.Pdf2DataMetaInfoContainer.GetMetaInfo">
            <summary>Return the IMetaInfo object.</summary>
            <returns>returns IMetaInfo</returns>
        </member>
        <member name="M:iText.Pdf2Data.IO.Pdf.DocumentCleaner.RemoveAnnotations(iText.Pdf2Data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Pdf2Data.IO.Pdf.DocumentCleaner.RemoveAnnotationsAndImages(iText.Pdf2Data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:iText.Pdf2Data.IO.TemplateProcessor">
            <summary>Contains methods for processing templates instance.</summary>
            <remarks>
            Contains methods for processing templates instance.
            <para />
            For internal usages only.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.IO.TemplateProcessor.FitTemplate(iText.Pdf2Data.Dto.Json.Templates.TemplateDTO,iText.Pdf2Data.DocumentSource)">
            <summary>
            Makes passed
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            processed.
            </summary>
            <remarks>
            Makes passed
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            processed. Missed properties will be set according to passed
            <see cref="T:iText.Pdf2Data.DocumentSource"/>.
            </remarks>
            <param name="toFit">template, which you would like to make processed</param>
            <param name="documentSource">document source, which will be used in fitting operation</param>
            <returns>
            instance of
            <see cref="T:iText.Pdf2Data.Templatev3.FitResult"/>
            which consist of processed template and exceptions which occur during
            fitting operation
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.IO.Template.PdfTemplateParser.FitTemplate(iText.Pdf2Data.DocumentSource,iText.Pdf2Data.Template.Template)">
            <summary>
            Process template, missed properties will be supplemented from given
            <see cref="T:iText.Pdf2Data.DocumentSource"/>.
            </summary>
            <param name="source">
            
            <see cref="T:iText.Pdf2Data.DocumentSource"/>
            from which data would be taken
            </param>
            <param name="toFit">
            unprocessed
            <see cref="T:iText.Pdf2Data.Template.Template"/>
            </param>
            <returns>
            processed
            <see cref="T:iText.Pdf2Data.Template.Template"/>
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Mappers.FontStyleSelectorEnumMapper">
            <summary>
            Class for converting
            <see cref="!:com.itextpdf.pdf2data.dto.json.selectors.FontStyleSelectorDTO"/>
            enum property to it
            respective property in selector.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.FontStyleSelectorEnumMapper.ConvertFontStyles(System.Collections.Generic.IList{System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles}})">
            <summary>
            Converts list of
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles?"/>
            in its byte representation.
            </summary>
            <param name="toConvert">list of styles to convert</param>
            <returns>byte representation of styles list</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.FontStyleSelectorEnumMapper.ConvertToFontStylesList(System.Int32)">
            <summary>
            Converts int mask to list of
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles?"/>
            which are contained in mask.
            </summary>
            <param name="styleMask">mask to convert</param>
            <returns>
            list with
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles?"/>
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Mappers.SelectorEnumMapper">
            <summary>Class for converting dto enum properties to their respective properties in selectors.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertAlignFilter(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.AlignFilter})">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.AlignFilter"/>
            in its string representation.
            </summary>
            <param name="toConvert">filter to convert</param>
            <returns>
            string representation of passed
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.AlignFilter"/>
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.InvalidTemplateException">if passed align filter is invalid</exception>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertBarcodeFormat(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.BarcodeFormat})">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.BarcodeFormat"/>
            in its string representation.
            </summary>
            <param name="toConvert">barcode to convert</param>
            <returns>
            string representation of passed
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.BarcodeFormat"/>
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.InvalidTemplateException">if passed barcode format is invalid</exception>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertCharSpacing(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.CharSpacing})">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.CharSpacing"/>
            in its string representation.
            </summary>
            <param name="toConvert">char spacing convert</param>
            <returns>
            string representation of passed
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.CharSpacing"/>
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.InvalidTemplateException">if passed char spacing is invalid</exception>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertGroupType(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType})">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType"/>
            in its string representation.
            </summary>
            <param name="toConvert">group type to convert</param>
            <returns>string representation of passed
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType"/>
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.InvalidTemplateException">if passed group type is invalid</exception>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertLineSpacing(System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.LineSpacing})">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.LineSpacing"/>
            in its string representation.
            </summary>
            <param name="toConvert">line spacing convert</param>
            <returns>
            string representation of passed
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.LineSpacing"/>
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.InvalidTemplateException">if passed line spacing is invalid</exception>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertToAlignFilter(System.String)">
            <summary>
            Converts passed string  in corresponding
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.AlignFilter"/>
            value.
            </summary>
            <param name="toConvert">string to convert</param>
            <returns>
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.AlignFilter"/>
            value which corresponds passed string
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.TemplateConversionException">if passed string can't be converted to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.AlignFilter"/>
            </exception>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertToBarcodeFormat(System.String)">
            <summary>
            Converts passed string  in corresponding
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.BarcodeFormat"/>
            value.
            </summary>
            <param name="toConvert">string to convert</param>
            <returns>
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.BarcodeFormat"/>
            value which corresponds passed string
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.TemplateConversionException">if passed string can't be converted to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.BarcodeFormat"/>
            </exception>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertToCharSpacing(System.String)">
            <summary>
            Converts passed string  in corresponding
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.CharSpacing"/>
            value.
            </summary>
            <param name="toConvert">string to convert</param>
            <returns>
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.CharSpacing"/>
            value which corresponds passed string
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.TemplateConversionException">if passed string can't be converted to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.CharSpacing"/>
            </exception>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertToGroupType(System.String)">
            <summary>
            Converts passed string  in corresponding
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType"/>
            value.
            </summary>
            <param name="toConvert">string to convert</param>
            <returns>
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType"/>
            value which corresponds passed string
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.TemplateConversionException">if passed string can't be converted to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType"/>
            </exception>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertToLineSpacing(System.String)">
            <summary>
            Converts passed string  in corresponding
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.LineSpacing"/>
            value.
            </summary>
            <param name="toConvert">string to convert</param>
            <returns>
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.LineSpacing"/>
            value which corresponds passed string
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.TemplateConversionException">if passed string can't be converted to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.LineSpacing"/>
            </exception>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorEnumMapper.ConvertToHeadersFormat(System.String)">
            <summary>
            Converts passed string  in corresponding
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.TableHeadersFormat"/>
            value.
            </summary>
            <param name="toConvert">string to convert</param>
            <returns>
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.TableHeadersFormat"/>
            value which corresponds passed string
            </returns>
            <exception cref="T:iText.Pdf2Data.Exceptions.TemplateConversionException">if passed string can't be converted to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Enums.TableHeadersFormat"/>
            </exception>
        </member>
        <member name="T:iText.Pdf2Data.Mappers.SelectorJsonMapper">
            <summary>Class for converting selector dto to proper entity classes.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO,System.Boolean)">
            <summary>Correlates the passed dto with the proper converting method.</summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the successor of
            <see cref="T:iText.Pdf2Data.Selector.Base.Selector"/>
            which represent passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertAlignSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.AlignSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.AlignSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertBarcodeSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.BarcodeSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.BarcodeSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertBoundarySelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.BoundarySelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.BoundarySelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertClusterTableSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertCropSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.CropSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.CropSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertDateSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Patterns.DateSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.DateSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.DateSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.DateSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertFontColorSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontColorSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontColorSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertFontSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertFrequencyTableSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.FrequencyTableSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.FrequencyTableSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertGroupSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.GroupSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.GroupSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Postprocessing.GroupSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Postprocessing.GroupSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertIBANSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Patterns.IBANSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IBANSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.IBANSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.IBANSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertImageSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.ImageSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.ImageSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertIntegerSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Patterns.IntegerSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IntegerSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.IntegerSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.IntegerSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertLineSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.LineGrouper"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.LineGrouper"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertPageSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.PageSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PageSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.PageSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.PageSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertParagraphSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertPatternSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertPickerSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Picker"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Picker"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertPriceSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Patterns.PriceSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PriceSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.PriceSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.PriceSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertRangeGroupDTO(iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Base.Range"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Base.Range"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertRegExpSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.RegExpSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.RegExpSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertRejectSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Composite.RejectSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.RejectSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.RejectSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.RejectSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertRelativeBoundarySelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.RelativeBoundarySelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.RelativeBoundarySelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertSelectorBenchSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Composite.SelectorBenchSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.SelectorBenchSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.SelectorBenchSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.SelectorBenchSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertTableSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.TableSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.TableSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertTimeSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Patterns.TimeSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.TimeSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.TimeSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.TimeSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertVATSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Patterns.VATSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.VATSelectorDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.VATSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.VATSelector"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertImageDimension(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO)">
            <summary>
            Converts image dimensions of
            <see cref="T:iText.Pdf2Data.Selector.Impl.ImageSelector"/>
            namely height and width.
            </summary>
            <remarks>
            Converts image dimensions of
            <see cref="T:iText.Pdf2Data.Selector.Impl.ImageSelector"/>
            namely height and width. Default values would be set, if some
            parameters are missing.
            </remarks>
            <param name="toConvert">dimension to convert</param>
            <returns>converted dimension</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertInnerPatternSelectorDTO(iText.Pdf2Data.Dto.Json.Selectors.Patterns.SimplePatternSelectorDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.SimplePatternSelectorDTO"/>
            to the appropriate
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.KeywordSelector"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            one of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.KeywordSelector"/>
            corresponding to the transferred dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertRangeAndStaticStructure``1(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,System.Func{System.String,``0})">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.StaticStructureDTO"/>
            or
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO"/>
            to
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            with passed converted function.
            </summary>
            <param name="toConvert">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            to convert
            </param>
            <param name="conversionFunction">conversion function for complex structure values</param>
            <typeparam name="T">the type in which you would to convert values of complex structure</typeparam>
            <returns>
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            with converted values
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertTableRowOrColumn(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO)">
            <summary>
            Convert
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            which represents column or row in
            <see cref="T:iText.Pdf2Data.Selector.Base.AbstractTableSelector"/>.
            </summary>
            <param name="toConvert">complex structure to convert</param>
            <returns>converted rows or columns values</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertToFontNameSelector(System.String,System.Boolean)">
            <summary>
            Converts font name to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector"/>.
            </summary>
            <param name="nameToConvert">font name, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector"/>
            with passed name
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertToFontSizeSelector(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,System.Boolean)">
            <summary>
            Converts font size to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector"/>.
            </summary>
            <param name="sizeToConvert">font size, which will be converted</param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector"/>
            with passed size
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ConvertToFontStyleSelector(System.Collections.Generic.IList{System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles}},System.Boolean)">
            <summary>
            Converts font styles to
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector"/>.
            </summary>
            <param name="stylesToConvert">
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles?"/>
            , which will be converted
            </param>
            <param name="isProcessed">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector"/>
            with passed styles
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.CreateBasicTableSelector(iText.Pdf2Data.Selector.Base.AbstractTableSelector.Builder,iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO)">
            <summary>
            Configures an instance of
            <see cref="T:iText.Pdf2Data.Selector.Base.AbstractTableSelector.Builder"/>
            with passed parameters.
            </summary>
            <remarks>
            Configures an instance of
            <see cref="T:iText.Pdf2Data.Selector.Base.AbstractTableSelector.Builder"/>
            with passed parameters. Could be used for setting
            common parameters of table selectors.
            </remarks>
            <param name="builder">builder which is used for creating an instance of one of the possible table selector
                </param>
            <param name="row">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            which represents row values of this selector
            </param>
            <param name="column">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            which represents column values of this selector
            </param>
            <returns>builder with passed parameters</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.CreateTableSelectorWithExtraProperties(iText.Pdf2Data.Selector.Base.AbstractTableSelector.Builder,iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO,System.Nullable{System.Int32},System.Nullable{iText.Pdf2Data.Dto.Json.Selectors.Enums.TableHeadersFormat})">
            <summary>
            Configures an instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector.Builder"/>
            with passed parameters.
            </summary>
            <remarks>
            Configures an instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector.Builder"/>
            with passed parameters. Could be used for
            parameters which used only in
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector"/>
            or
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.TableSelector"/>.
            </remarks>
            <param name="builder">builder which is used for creating an instance of one of the possible table selector
                </param>
            <param name="row">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            which represents row values of this selector
            </param>
            <param name="column">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            which represents column values of this selector
            </param>
            <param name="determiningColumn">determining column for cluster algorithm</param>
            <param name="format">specified headers format</param>
            <returns>builder with passed parameters</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.GetDoubleValuesFromComplexStructure(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO)">
            <summary>
            Gets double values for
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>.
            </summary>
            <param name="toConvert">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            to convert
            </param>
            <returns>double values of converted structure</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.GetIntegerValuesFromComplexStructure(iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO)">
            <summary>
            Gets integer values for
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>.
            </summary>
            <param name="toConvert">
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            to convert
            </param>
            <returns>integer values of converted structure</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ValidateAndConvertNamedStructure(iText.Pdf2Data.Dto.Json.Selectors.Ranges.NamedStructureDTO)">
            <summary>Validates and convert named structure.</summary>
            <remarks>Validates and convert named structure. Value of this structure can't be null.</remarks>
            <param name="toConvert">named structure to validate and convert</param>
            <returns>named structure value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ValidateRangeStructure(iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO)">
            <summary>Validates range structure.</summary>
            <remarks>Validates range structure. One of fields should be not null.</remarks>
            <param name="toValidate">range structure to validate</param>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorJsonMapper.ValidateStaticStructure(iText.Pdf2Data.Dto.Json.Selectors.Ranges.StaticStructureDTO)">
            <summary>Validates static structure, which must be not null value.</summary>
            <param name="toValidate">static structure to validate</param>
        </member>
        <member name="T:iText.Pdf2Data.Mappers.SelectorMapper">
            <summary>Class for converting selector entity to proper dto class.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertSelectorToJsonDTO(iText.Pdf2Data.Selector.Base.Selector,System.Boolean)">
            <summary>Correlates the passed entity with the proper converting method.</summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the successor of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO"/>
            which represent passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertAlignSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.AlignSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.AlignSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertBarcodeSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.BarcodeSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.BarcodeSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertBoundarySelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.BoundarySelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.BoundarySelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertClusterTableSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertCropSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Composite.CropSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.CropSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.CropSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertDateSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.DateSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.DateSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.DateSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.DateSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertFontColorSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.FontColorSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontColorSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertFontSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.FontSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertFrequencyTableSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Table.FrequencyTableSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.FrequencyTableSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertGroupSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Postprocessing.GroupSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Postprocessing.GroupSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.GroupSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.GroupSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertIBANSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.IBANSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.IBANSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IBANSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IBANSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertImageSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.ImageSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.ImageSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertIntegerSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.IntegerSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.IntegerSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IntegerSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.IntegerSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertLineSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Group.LineGrouper,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.LineGrouper"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertPageSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.PageSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.PageSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PageSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PageSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertParagraphSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertPatternSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PatternSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertPickerSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Picker)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Picker"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertPriceSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.PriceSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.PriceSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PriceSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.PriceSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertRangeToJsonDTO(iText.Pdf2Data.Selector.Base.Range)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Base.Range"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RangeGroupDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertRegExpSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.Regexp.RegExpSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.RegExpSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertRejectSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Composite.RejectSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.RejectSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.RejectSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.RejectSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertRelativeBoundarySelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.RelativeBoundarySelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.RelativeBoundarySelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertSelectorBenchSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Composite.SelectorBenchSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Composite.SelectorBenchSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.SelectorBenchSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Composite.SelectorBenchSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertTableSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Table.TableSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.TableSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertTimeSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.TimeSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.TimeSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.TimeSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.TimeSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertVATSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.VATSelector,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.VATSelector"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.VATSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.VATSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertDoubleToComplexStructure(System.Collections.Generic.IList{System.Nullable{System.Double}})">
            <summary>
            Converts
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>.
            </summary>
            <param name="toConvert">double values, which will be converted to complex structure</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            with passed double values
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertImageDimensionToComplexStructure(System.String,System.String)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Selector.Impl.ImageSelector.Dimension"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>.
            </summary>
            <param name="firstDimension">minimal image dimension</param>
            <param name="secondDimension">maximal image dimension</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            with passed dimensions
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertInnerPatternSelectorToJsonDTO(iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.KeywordSelector,System.String)">
            <summary>
            Converts inner selector of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            to proper dto class.
            </summary>
            <param name="toConvert">inner selector which will be converted</param>
            <param name="evaluatedExpression">pattern of passed inner selector</param>
            <returns>
            dto object, which represent passed
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.KeywordSelector"/>
            in json format
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertIntegerToComplexStructure(System.Collections.Generic.IList{System.Nullable{System.Int32}})">
            <summary>
            Converts
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>.
            </summary>
            <param name="toConvert">integer values, which will be converted to complex structure</param>
            <returns>with passed integer values</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertRowAndColumnToComplexStructures(iText.Pdf2Data.Selector.Base.AbstractTableSelector)">
            <summary>
            Converts row and column of passed successor of
            <see cref="T:iText.Pdf2Data.Selector.Base.AbstractTableSelector"/>
            to
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            which will represents row/colum in json format.
            </summary>
            <remarks>
            Converts row and column of passed successor of
            <see cref="T:iText.Pdf2Data.Selector.Base.AbstractTableSelector"/>
            to
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            which will represents row/colum in json format. First list element always should be
            structure with row values, second is for column values.
            </remarks>
            <param name="tableSelector">selector, whose column and row values will be converted</param>
            <returns>
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            whose elements represents column and row in json format
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertRowOrColumnToComplexStructure(System.Int32,System.Int32)">
            <summary>
            Converts row or column values to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>.
            </summary>
            <param name="first">first row/column</param>
            <param name="last">second row/column</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            with passed row/column values
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertToStaticOrRangeStructure``1(System.Collections.Generic.IList{``0},System.Func{``0,System.String})">
            <summary>
            Converts passed
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            either in
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.StaticStructureDTO"/>
            or
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO"/>
            according to list
            size.
            </summary>
            <param name="toConvert">list which will be converted to complex structure</param>
            <param name="conversionFunction">conversion function for passed list values</param>
            <typeparam name="T">type of list values</typeparam>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.StaticStructureDTO"/>
            or
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO"/>
            which will represent passed list
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.GetEvaluatedPattern(iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector,System.Boolean)">
            <summary>
            Gets applied pattern from passed
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>.
            </summary>
            <param name="selector">selector, from which pattern should be evaluated</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>evaluated selector pattern</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertFontNameOfFontFamilySelector(iText.Pdf2Data.Selector.Impl.Text.FontNameSelector,System.Boolean)">
            <summary>
            Converts font name of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>converted font name of passed selector</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertFontSizeOfFontSizeSelector(iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector,System.Boolean)">
            <summary>
            Converts font size of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>converted font size of passed selector</returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.SelectorMapper.ConvertFontStylesOfFontStyleSelector(iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector,System.Boolean)">
            <summary>
            Converts font styles of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if selector is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            converted
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles?"/>
            of passed selector.
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Mappers.TemplateJsonMapper">
            <summary>Class for converting template dto to proper entity classes.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.TemplateJsonMapper.ConvertTemplateDTO(iText.Pdf2Data.Dto.Json.Templates.TemplateDTO)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Template.Template"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Template.Template"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.TemplateJsonMapper.ConvertTemplateMetaDTO(iText.Pdf2Data.Dto.Json.Templates.TemplateMetaDTO)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateMetaDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Template.TemplateMeta"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Template.TemplateMeta"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.TemplateJsonMapper.ConvertDataFieldDTO(iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Template.DataField"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <param name="isProcessedTemplate">
            
            <see langword="true"/>
            if data field is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Template.DataField"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.TemplateJsonMapper.ConvertRectangleDTO(iText.Pdf2Data.Dto.Json.Templates.RectangleDTO)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.RectangleDTO"/>
            to
            <see cref="T:iText.Pdf2Data.Structure.Geom.Rectangle"/>.
            </summary>
            <param name="dtoToConvert">dto, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Structure.Geom.Rectangle"/>
            which represents passed dto
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.TemplateJsonMapper.ConvertRequiredBoolean(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Converts
            <see cref="!:bool?"/>
            to primitive object.
            </summary>
            <param name="toConvert">
            
            <see cref="!:bool?"/>
            object to convert
            </param>
            <returns>primitive value of passed object</returns>
        </member>
        <member name="T:iText.Pdf2Data.Mappers.TemplateMapper">
            <summary>Class for converting template entity classes to proper dto classes.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.TemplateMapper.ConvertTemplateToJsonDTO(iText.Pdf2Data.Template.Template,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Template.Template"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if template is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.TemplateMapper.ConvertTemplateMetaToJsonDTO(iText.Pdf2Data.Template.TemplateMeta)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Template.TemplateMeta"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateMetaDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateMetaDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.TemplateMapper.ConvertDataFieldToJsonDTO(iText.Pdf2Data.Template.DataField,System.Boolean)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Template.DataField"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <param name="isFitted">
            
            <see langword="true"/>
            if data field is processed,
            <see langword="false"/>
            otherwise
            </param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Mappers.TemplateMapper.ConvertRectangleToJsonDTO(iText.Pdf2Data.Structure.Geom.Rectangle)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Structure.Geom.Rectangle"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.RectangleDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.RectangleDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.P2dta.P2dtaConstants">
            <summary>Class containing all necessary information for working with template archive as constants.</summary>
        </member>
        <member name="T:iText.Pdf2Data.P2dta.P2dtaReader">
            <summary>Class for reading p2dta.</summary>
        </member>
        <member name="M:iText.Pdf2Data.P2dta.P2dtaReader.#ctor(System.IO.FileInfo)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.P2dta.P2dtaReader"/>
            with passed parameter.
            </summary>
            <param name="archive">template archive to be read</param>
        </member>
        <member name="M:iText.Pdf2Data.P2dta.P2dtaReader.GetMeta">
            <summary>Reads meta file of current p2dta.</summary>
            <returns>input stream containing meta file</returns>
        </member>
        <member name="M:iText.Pdf2Data.P2dta.P2dtaReader.GetData(System.String)">
            <summary>Reads file for specified path.</summary>
            <param name="dataPath">path to file in p2dta</param>
            <returns>input stream containing file with passed path</returns>
        </member>
        <member name="T:iText.Pdf2Data.P2dta.P2dtaWriter">
            <summary>Class for writing p2dta.</summary>
        </member>
        <member name="M:iText.Pdf2Data.P2dta.P2dtaWriter.#ctor(System.IO.FileInfo)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.P2dta.P2dtaWriter"/>
            with passed parameter.
            </summary>
            <param name="file">template archive to write in</param>
        </member>
        <member name="M:iText.Pdf2Data.P2dta.P2dtaWriter.AddMeta(System.Object)">
            <summary>Add metaobject to current p2dta.</summary>
            <param name="metaObject">meta object to add</param>
        </member>
        <member name="M:iText.Pdf2Data.P2dta.P2dtaWriter.AddTemplate(System.String,iText.Pdf2Data.Dto.Json.Templates.TemplateDTO)">
            <summary>Add template object to current p2dta.</summary>
            <param name="templateName">template file name in p2dta</param>
            <param name="template">template object to add</param>
            <returns>full entry name of template file in p2dta</returns>
        </member>
        <member name="M:iText.Pdf2Data.P2dta.P2dtaWriter.AddSample(System.String,System.IO.Stream)">
            <summary>Add sample object to current p2dta.</summary>
            <param name="sampleName">sample file name in p2dta</param>
            <param name="sampleStream">stream with sample object</param>
            <returns>full entry name of sample file in p2dta</returns>
        </member>
        <member name="M:iText.Pdf2Data.P2dta.P2dtaWriter.AddReferencePdf(System.String,System.IO.Stream)">
            <summary>Add reference pdf object to current p2dta.</summary>
            <param name="referencePdfName">reference pdf file name in p2dta</param>
            <param name="referencePdfStream">stream with reference pdf object</param>
            <returns>full entry name of reference file in p2dta</returns>
        </member>
        <member name="M:iText.Pdf2Data.P2dta.P2dtaWriter.AddLegacyPdf(System.String,System.IO.Stream)">
            <summary>Add legacy pdf object to current p2dta.</summary>
            <param name="legacyPdfName">legacy pdf file name im p2dta</param>
            <param name="legacyPdfStream">stream with legacy pdf object</param>
            <returns>full entry name of legacy pdf file in p2dta</returns>
        </member>
        <member name="M:iText.Pdf2Data.P2dta.P2dtaWriter.AddLegacyXml(System.String,System.IO.Stream)">
            <summary>Add legacy xml object to current p2dta.</summary>
            <param name="legacyXmlName">legacy xml file name im p2dta</param>
            <param name="legacyXmlStream">stream with legacy xml object</param>
            <returns>full entry name of legacy xml file in p2dta</returns>
        </member>
        <member name="T:iText.Pdf2Data.Pdf2DataExtractor">
            <summary>
            <c>Pdf2DataExtractor</c>
            is a class for extracting templates and data from PDF files.
            </summary>
            <remarks>
            <c>Pdf2DataExtractor</c>
            is a class for extracting templates and data from PDF files.
            <para />
            To create instance of
            <c>Pdf2DataExtractor</c>
            , use
            <see cref="M:iText.Pdf2Data.Pdf2DataExtractor.Create(System.IO.FileInfo)"/>.
            <para />
            To extract data from PDF file use
            <see cref="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(System.IO.FileInfo)"/>
            method.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.#ctor(iText.Pdf2Data.Template.Template)">
            <summary>
            Creates instance of
            <c>Pdf2DataExtractor</c>
            with passed template entity.
            </summary>
            <param name="template">template, which will be used in recognition.</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Create(System.IO.FileInfo)">
            <summary>
            Creates instance of
            <c>Pdf2DataExtractor</c>
            from pdf2data template file.
            </summary>
            <remarks>
            Creates instance of
            <c>Pdf2DataExtractor</c>
            from pdf2data template file. Note that template should be
            processed.
            </remarks>
            <param name="p2dFile">pdf2data template archive</param>
            <returns>a Pdf2DataExtractor instance</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.CreateFromTemplateContentJson(System.IO.Stream)">
            <summary>
            Creates instance of
            <c>Pdf2DataExtractor</c>
            from stream which contants pdf2data template
            content in JSON format.
            </summary>
            <remarks>
            Creates instance of
            <c>Pdf2DataExtractor</c>
            from stream which contants pdf2data template
            content in JSON format. Note that template should be processed.
            </remarks>
            <param name="templateContentJsonStream">processed template content stream</param>
            <returns>a Pdf2DataExtractor instance</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.ParseTemplateFromPDF(System.String)">
            <summary>Parses the template from pdf file.</summary>
            <param name="templatePDF">a path to pdf file</param>
            <returns>A template instance.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.ParseTemplateFromPDF(System.IO.Stream)">
            <summary>Parses the template from input stream.</summary>
            <param name="templateInputStream">pdf input stream with template</param>
            <returns>A template instance.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.ParseTemplateFromXML(System.String)">
            <summary>Gets the template from xml file.</summary>
            <param name="templateXML">a path to xml file</param>
            <returns>Template instance.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.ParseTemplateFromXML(System.IO.Stream)">
            <summary>Gets the template from input stream.</summary>
            <param name="xmlInputStream">input stream that contains template in xml form</param>
            <returns>Template instance.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(iText.Pdf2Data.Template.Template,System.String)">
            <summary>Recognizes a pdf file using template instance.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <returns>Result of recognition.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(iText.Pdf2Data.Template.Template,System.String,System.String)">
            <summary>Recognize a pdf file using template instance and write results to pdf file.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <returns>Result of recognition.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(iText.Pdf2Data.Template.Template,System.IO.Stream)">
            <summary>Recognizes a pdf file using template instance.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <returns>Result of recognition.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(iText.Pdf2Data.Template.Template,System.IO.Stream,System.IO.Stream)">
            <summary>Recognizes a pdf file using template instance and write results to pdf file.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <returns>Result of recognition.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(iText.Pdf2Data.Template.Template,System.IO.Stream,System.IO.Stream,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognizes a pdf file using template instance and write results to pdf file.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
            <returns>Result of recognition.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(iText.Pdf2Data.Template.Template,System.String,System.String)">
            <summary>Recognize a pdf file using template instance and save results to xml file.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputXML">path to xml file with recognition results</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(iText.Pdf2Data.Template.Template,System.String,System.String,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml file.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputXML">path to xml file with recognition results</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(iText.Pdf2Data.Template.Template,System.String,System.String,System.String)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <param name="outputXML">path to xml file with recognition results</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(iText.Pdf2Data.Template.Template,System.String,System.String,System.String,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <param name="outputXML">path to xml file with recognition results</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToJson(iText.Pdf2Data.Template.Template,System.String,System.String,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to json file.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputJson">path to json file with recognition results</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(iText.Pdf2Data.Template.Template,System.IO.Stream,System.IO.Stream)">
            <summary>Recognize a pdf file using template instance and save results to xml file.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(iText.Pdf2Data.Template.Template,System.IO.Stream,System.IO.Stream,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml file.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(iText.Pdf2Data.Template.Template,System.IO.Stream,System.IO.Stream,System.IO.Stream)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(iText.Pdf2Data.Template.Template,System.IO.Stream,System.IO.Stream,System.IO.Stream,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToJson(iText.Pdf2Data.Template.Template,System.IO.Stream,System.IO.Stream,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to json and pdf files.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="jsonOutputStream">output stream for writing recognition results (json type)</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(System.String)">
            <summary>Recognize a pdf file using template instance.</summary>
            <param name="targetPDF">path to pdf file for recognition</param>
            <returns>Result of recognition.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(System.String,System.String)">
            <summary>Recognize a pdf file using template instance and write results to pdf file.</summary>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <returns>Result of recognition.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(System.IO.Stream,System.IO.Stream)">
            <summary>Recognize a pdf file using template instance and write results to pdf file.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <returns>Result of recognition.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(System.String,System.String,System.String)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <param name="outputXML">path to xml file with recognition results</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(System.String,System.String,System.String,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <param name="outputXML">path to xml file with recognition results</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeToXML(System.IO.Stream,System.IO.Stream,System.IO.Stream,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.GetTemplate">
            <summary>Gets current template instance.</summary>
            <returns>current template instance</returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(System.IO.FileInfo)">
            <summary>Recognize a pdf file.</summary>
            <param name="targetPDF">pdf file for recognition</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Result.ParsingResult"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(System.IO.FileInfo,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file.</summary>
            <param name="targetPDF">pdf file for recognition</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.RecognitionProperties"/>
            instance
            </param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Result.ParsingResult"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(System.IO.Stream)">
            <summary>Recognize a pdf file.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Result.ParsingResult"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Recognize(System.IO.Stream,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.RecognitionProperties"/>
            instance
            </param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Result.ParsingResult"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeOnPdf(System.IO.FileInfo)">
            <summary>Recognize a pdf file.</summary>
            <param name="targetPDF">pdf file for recognition</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.RecognitionResultHolder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeOnPdf(System.IO.FileInfo,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file.</summary>
            <param name="targetPDF">pdf file for recognition</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.RecognitionProperties"/>
            instance
            </param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.RecognitionResultHolder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeOnPdf(System.IO.Stream)">
            <summary>Recognize a pdf file.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.RecognitionResultHolder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.RecognizeOnPdf(System.IO.Stream,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.RecognitionProperties"/>
            instance
            </param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.RecognitionResultHolder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Check(System.IO.FileInfo)">
            <summary>Recognize a pdf file and returns recognition results amount.</summary>
            <param name="targetPDF">pdf file for recognition</param>
            <returns>
            A
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the recognition results as key-value pairs of strings and integers.
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Check(System.IO.FileInfo,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file and returns recognition results amount.</summary>
            <param name="targetPDF">pdf file for recognition</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.RecognitionProperties"/>
            instance
            </param>
            <returns>
            A
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the recognition results as key-value pairs of strings and integers.
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Check(System.IO.Stream)">
            <summary>Recognize a pdf file and returns recognition results amount.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <returns>
            A
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the recognition results as key-value pairs of strings and integers.
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractor.Check(System.IO.Stream,iText.Pdf2Data.RecognitionProperties)">
            <summary>Recognize a pdf file and returns recognition results amount.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.RecognitionProperties"/>
            instance
            </param>
            <returns>
            A
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the recognition results as key-value pairs of strings and integers.
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Pdf2DataExtractorFactory">
            <summary>
            Contains methods for creating an instance of
            <see cref="T:iText.Pdf2Data.Pdf2DataExtractor"/>
            class.
            </summary>
            <remarks>
            Contains methods for creating an instance of
            <see cref="T:iText.Pdf2Data.Pdf2DataExtractor"/>
            class.
            <para />
            For internal usage only.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataExtractorFactory.Create(iText.Pdf2Data.Template.Template)">
            <summary>
            Creates an instance of
            <see cref="T:iText.Pdf2Data.Pdf2DataExtractor"/>
            class.
            </summary>
            <param name="template">
            instance of
            <see cref="T:iText.Pdf2Data.Template.Template"/>
            class which will be used in recognition
            </param>
            <returns>
            instance of
            <see cref="T:iText.Pdf2Data.Pdf2DataExtractor"/>
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Pdf2DataTemplateConverter">
            <summary>Contains methods for creating p2dta.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataTemplateConverter.ConvertPdfV3ToP2dta(System.IO.Stream,System.IO.FileInfo)">
            <summary>Converts pdf templateV3 to p2dta.</summary>
            <param name="pdfStream">stream with pdf template</param>
            <param name="p2dtaFile">p2dta file which represents passed pdf template</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataTemplateConverter.ConvertXmlV3ToP2d(System.IO.Stream,System.IO.FileInfo)">
            <summary>Converts xml templateV3 to p2dta.</summary>
            <param name="xmlStream">stream with xml template</param>
            <param name="p2dFile">p2d file which represents passed xml template</param>
        </member>
        <member name="M:iText.Pdf2Data.Pdf2DataTemplateConverter.ConvertP2dtaToP2d(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>Converts passed p2dta file to it processed representation.</summary>
            <param name="unprocessedP2dtaFile">unprocessed p2dta</param>
            <param name="processedP2dFile">new p2d file which represents processed passed p2dta</param>
        </member>
        <member name="T:iText.Pdf2Data.RecognitionProperties">
            <summary>The <i>RecognitionProperties</i> class represents properties of recognition.</summary>
        </member>
        <member name="F:iText.Pdf2Data.RecognitionProperties.metaInfo">
            <summary>Meta info that will be added to the events thrown by pdf2data.</summary>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionProperties.#ctor">
            <summary>Creates an instance of properties with default state of extracting metadata as <i>false</i></summary>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionProperties.AddExtractionMetadata(System.Boolean)">
            <summary>Sets if metadata will be extracted during recognition.</summary>
            <param name="needMetadata"><i>true</i> or <i>false</i></param>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionProperties.SetMetaInfo(iText.Commons.Actions.Contexts.IMetaInfo)">
            <summary>Sets IMetaInfo for this recognition properties instance</summary>
            <param name="metaInfo">IMetaInfo instance</param>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionProperties.NeedMetadata">
            <summary>Returns a state of extracting metadata</summary>
            <returns>state of extracting metadata</returns>
        </member>
        <member name="T:iText.Pdf2Data.RecognitionResultHolder">
            <summary>Recognition result holder with methods to operate with the results.</summary>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.#ctor(iText.Pdf2Data.Result.RecognitionResult)">
            <summary>Creates an instance with specified result.</summary>
            <param name="result">recognition result to be used in holder</param>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.ReadFromJson(System.IO.Stream)">
            <summary>Reads result from input stream containing the recognition result in JSON format.</summary>
            <param name="is">
            the
            <see cref="T:System.IO.Stream"/>
            to read from
            </param>
            <returns>
            an instance of
            <see cref="T:iText.Pdf2Data.RecognitionResultHolder"/>
            based on the read result
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.GetResult">
            <summary>Retrieve result object.</summary>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Result.RecognitionResult"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.WriteToJson(System.IO.FileInfo)">
            <summary>Writes holded result into the specified file as JSON.</summary>
            <param name="outputJson">
            the
            <see cref="T:System.IO.FileInfo"/>
            to write into
            </param>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.WriteToJson(System.IO.FileInfo,iText.Pdf2Data.SerializationProperties)">
            <summary>Writes holded result into the specified file as JSON.</summary>
            <param name="outputJson">
            the
            <see cref="T:System.IO.FileInfo"/>
            to write into
            </param>
            <param name="properties">serialization properties</param>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.WriteToJson(System.IO.Stream)">
            <summary>Writes holded result into the specified output stream as JSON.</summary>
            <param name="jsonOutputStream">
            the
            <see cref="T:System.IO.Stream"/>
            to write into
            </param>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.WriteToJson(System.IO.Stream,iText.Pdf2Data.SerializationProperties)">
            <summary>Writes holded result into the specified output stream as JSON.</summary>
            <param name="jsonOutputStream">
            the
            <see cref="T:System.IO.Stream"/>
            to write into
            </param>
            <param name="properties">serialization properties</param>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.WriteToXml(System.IO.FileInfo)">
            <summary>Saves recognition results to provided xml file.</summary>
            <param name="outputXml">xml file</param>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.WriteToXml(System.IO.FileInfo,iText.Pdf2Data.SerializationProperties)">
            <summary>Saves recognition results to provided xml file.</summary>
            <param name="outputXml">output stream</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.SerializationProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.WriteToXml(System.IO.Stream)">
            <summary>Saves recognition results to output stream in xml form.</summary>
            <param name="xmlOutputStream">output stream</param>
        </member>
        <member name="M:iText.Pdf2Data.RecognitionResultHolder.WriteToXml(System.IO.Stream,iText.Pdf2Data.SerializationProperties)">
            <summary>Saves recognition results to output stream in xml form.</summary>
            <param name="xmlOutputStream">output stream</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.SerializationProperties"/>
            instance
            </param>
        </member>
        <member name="T:iText.Pdf2Data.RecognitionResultHolderFactory">
            <summary>
            Contains methods for creating an instance of
            <see cref="T:iText.Pdf2Data.RecognitionResultHolder"/>
            class.
            </summary>
            <remarks>
            Contains methods for creating an instance of
            <see cref="T:iText.Pdf2Data.RecognitionResultHolder"/>
            class.
            <para />
            For internal usage only.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Rendering.Impl.PdfiumRenderer.OpenDocumentIfNecessary">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Pdf2Data.Rendering.PdfRendererFactory.CreateNonSharedRenderer(iText.Pdf2Data.DocumentSource,System.Single)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:iText.Pdf2Data.Result.DataFieldResult">
            <summary>Class which represents data field result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.DataFieldResult.#ctor(System.String,System.Collections.Generic.IList{iText.Pdf2Data.Result.Value.AbstractValueResult})">
            <summary>Creates an instance of data field result.</summary>
            <param name="dataType">data field's data type</param>
            <param name="results">data field's results</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.DataFieldResult.GetDataType">
            <summary>Get data field's data type.</summary>
            <returns>data field's data type</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.DataFieldResult.GetResults">
            <summary>Get list of data field's results.</summary>
            <returns>list of data field's results</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.DataFieldResult.CloneWithoutMeta">
            <summary>Clones this instance without nested metadata entries in results.</summary>
            <returns>clone of the current result without metadata</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Meta.FontMetaResult">
            <summary>Class representing font metadata.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.Meta.FontMetaResult.#ctor(System.String,iText.Pdf2Data.Result.Meta.FontStyle,System.String)">
            <summary>Creates an instance of font metadata representation.</summary>
            <param name="fontName">the font name</param>
            <param name="fontStyle">the font style</param>
            <param name="fontColor">the font color</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.Meta.FontMetaResult.GetFontName">
            <summary>Get font name.</summary>
            <returns>font name</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Meta.FontMetaResult.GetFontStyle">
            <summary>Get font style.</summary>
            <returns>font style</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Meta.FontMetaResult.GetFontColor">
            <summary>Get font color</summary>
            <returns>font color</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Meta.FontStyle">
            <summary>Enum representing possible font styles.</summary>
        </member>
        <member name="F:iText.Pdf2Data.Result.Meta.FontStyle.BOLD">
            <summary>Bold style.</summary>
        </member>
        <member name="F:iText.Pdf2Data.Result.Meta.FontStyle.BOLD_ITALIC">
            <summary>Bold and Italic style.</summary>
        </member>
        <member name="F:iText.Pdf2Data.Result.Meta.FontStyle.ITALIC">
            <summary>Italic style.</summary>
        </member>
        <member name="F:iText.Pdf2Data.Result.Meta.FontStyle.NORMAL">
            <summary>Normal style.</summary>
        </member>
        <member name="T:iText.Pdf2Data.Result.Meta.PageLocationMetaResult">
            <summary>Class representing page location metadata.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.Meta.PageLocationMetaResult.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>Creates an instance of page location metadata representation.</summary>
            <param name="x">the x coordinate on the page</param>
            <param name="y">the y coordinate on the page</param>
            <param name="width">the width of the location</param>
            <param name="height">the height of the location</param>
            <param name="page">the page number</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.Meta.PageLocationMetaResult.GetX">
            <summary>Get X coordinate on the page.</summary>
            <returns>x coordinate value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Meta.PageLocationMetaResult.GetY">
            <summary>The Y coordinate on the page.</summary>
            <returns>y coordinate value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Meta.PageLocationMetaResult.GetWidth">
            <summary>Get width of the location.</summary>
            <returns>width value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Meta.PageLocationMetaResult.GetHeight">
            <summary>Get height of the location.</summary>
            <returns>height value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Meta.PageLocationMetaResult.GetPage">
            <summary>Get page number of the location.</summary>
            <returns>page number</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.ParsingResult">
            <summary>An object that contains results of recognition.</summary>
            <remarks>
            An object that contains results of recognition.
            <para />
            There are recognized data for each data field, messages for unrecognized data field
            (if it wasn't recognized due to some error) and some stats: number of correctly recognized
            data fields, number of data fields recognized with warnings and number of data fields
            recognized with errors.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.GetMessage(System.String)">
            <summary>Return an error or warning message for datafield.</summary>
            <param name="dataFieldName">datafield name</param>
            <returns>The message if datafield wasn't recognized or <i>null</i> otherwise.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToXML(System.String)">
            <summary>Saves parsing results to xml file.</summary>
            <param name="outputXML">path to xml file</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToXML(System.String,iText.Pdf2Data.RecognitionProperties)">
            <summary>Saves parsing results to xml file.</summary>
            <param name="outputXML">path to xml file</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToXML(System.IO.Stream)">
            <summary>Saves parsing results to output stream in xml form.</summary>
            <param name="xmlOutputStream">output stream</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToXML(System.IO.Stream,iText.Pdf2Data.RecognitionProperties)">
            <summary>Saves parsing results to output stream in xml form.</summary>
            <param name="xmlOutputStream">output stream</param>
            <param name="properties">a <c>RecognitionProperties</c> instance</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToJson(System.IO.FileInfo)">
            <summary>Saves parsing results to provided json file.</summary>
            <param name="outputJson">outputJson xml file</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToJson(System.IO.FileInfo,iText.Pdf2Data.SerializationProperties)">
            <summary>Saves parsing results to provided json file.</summary>
            <param name="outputJson">output stream</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.SerializationProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToJson(System.IO.Stream)">
            <summary>Saves parsing results to output stream in json form.</summary>
            <param name="jsonOutputStream">output stream</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToJson(System.IO.Stream,iText.Pdf2Data.SerializationProperties)">
            <summary>Saves parsing results to output stream in json form.</summary>
            <param name="jsonOutputStream">output stream</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.SerializationProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToXml(System.IO.FileInfo)">
            <summary>Saves parsing results to provided xml file.</summary>
            <param name="outputXml">xml file</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToXml(System.IO.FileInfo,iText.Pdf2Data.SerializationProperties)">
            <summary>Saves parsing results to provided xml file.</summary>
            <param name="outputXml">output stream</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.SerializationProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToXml(System.IO.Stream)">
            <summary>Saves parsing results to output stream in xml form.</summary>
            <param name="xmlOutputStream">output stream</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.SaveToXml(System.IO.Stream,iText.Pdf2Data.SerializationProperties)">
            <summary>Saves parsing results to output stream in xml form.</summary>
            <param name="xmlOutputStream">output stream</param>
            <param name="properties">
            a
            <see cref="T:iText.Pdf2Data.SerializationProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.GetResults(System.String)">
            <summary>Returns list of recognized objects.</summary>
            <param name="dataFieldName">data field name</param>
            <returns>
            list of corresponding recognized objects or <i>null</i> if recognition was aborted or
            there is no data field with specific name
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.GetAllResults">
            <summary>Returns a map with recognition results.</summary>
            <returns>Map with datafield name as key and list with recognition elements as value.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.GetRawResults">
            <summary>Returns raw recognition results.</summary>
            <returns>raw recognition results structure</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.GetFirstResultAsTable(System.String)">
            <summary>Checks if recognized elements for specified data field are tables and returns first of them.</summary>
            <param name="dataFieldName">data field name</param>
            <returns>
            first table or <i>null</i> if there are no recognized tables or <i>null</i> if recognition was aborted or
            there is no data field with specific name
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.GetFirstResultAsImage(System.String)">
            <summary>Checks if recognized elements for specified datafield are images and returns first of them.</summary>
            <param name="dataFieldName">datafield name</param>
            <returns>
            first image or <i>null</i> if there are no recognized images or <i>null</i> if recognition was aborted or
            there is no data field with specific name
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.GetFirstResultAsText(System.String)">
            <summary>Checks if recognized elements for specified datafield aren't tables and returns first of them.</summary>
            <param name="dataFieldName">datafield name</param>
            <returns>
            first result as string or <i>null</i> if there are no recognized elements or <i>null</i> if recognition
            was aborted or
            there is no data field with specific name
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.GetWarningsNumber">
            <summary>Returns a number of data fields that were recognized with warnings.</summary>
            <returns>the number of data fields that were recognized with warnings</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.GetErrorsNumber">
            <summary>Returns a number of data fields that were recognized with errors.</summary>
            <returns>the number of data fields that were recognized with errors</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ParsingResult.GetCorrectNumber">
            <summary>Returns a number of data fields that were recognized correctly.</summary>
            <returns>the number of data fields that were recognized correctly</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.RecognitionResult">
            <summary>Class which represents recognition result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.RecognitionResult.#ctor(System.String,System.Collections.Generic.SortedDictionary{System.String,iText.Pdf2Data.Result.DataFieldResult})">
            <summary>Creates an instance of recognition result.</summary>
            <param name="resultSchemaVersion">recognition result schema version. Mainly used for deserialization of the result.
                </param>
            <param name="dataFieldResults">map of data field results</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.RecognitionResult.GetResultSchemaVersion">
            <summary>Get result schema version.</summary>
            <returns>result schema version</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.RecognitionResult.GetDataFieldResults">
            <summary>Get data field results map.</summary>
            <returns>data field results map</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.RecognitionResult.CloneWithoutMeta">
            <summary>Clones this instance without metadata entries in results.</summary>
            <returns>clone of the current result without metadata</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.ResultCell">
            <summary>Instance of recognized table cell</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultCell.ToString">
            <summary>Returns a string presentation of the table cell.</summary>
            <returns>the string presentation of the table cell</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultCell.GetRowspan">
            <summary>Returns a cell rowspan.</summary>
            <returns>the int value of rowspan</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultCell.GetColspan">
            <summary>Returns a cell colspan.</summary>
            <returns>the int value of colspan</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.ResultElement">
            <summary>Instance of recognized data</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultElement.GetBbox">
            <summary>Return a boundary box of recognized element.</summary>
            <returns>the boundary box of recognized element</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultElement.SetBbox(iText.Pdf2Data.Structure.Geom.Rectangle)">
            <summary>Set a boundary box for recognized element.</summary>
            <param name="bbox">the boundary box of recognized element</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultElement.GetPage">
            <summary>Return a page of recognized element.</summary>
            <returns>page index, one-based</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultElement.SetPage(System.Int32)">
            <summary>Set a page of recognized element.</summary>
            <param name="page">the page of recognized element</param>
        </member>
        <member name="T:iText.Pdf2Data.Result.ResultImage">
            <summary>Bytes presentation of recognized image.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultImage.GetBytes">
            <summary>Get bytes of recognized image.</summary>
            <returns>the bytes of recognized image</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultImage.GetImage">
            <summary>Get a RenderedImage instance of recognized image.</summary>
            <returns>the instance of recognized image</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultImage.ToString">
            <summary>Returns a string presentation of recognized element.</summary>
            <returns>the Base64-encoded data</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.ResultTable">
            <summary>String presentation of recognized elements like Table</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultTable.GetNumberOfRows">
            <summary>Returns a number of table rows.</summary>
            <returns>the number of table rows</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultTable.GetNumberOfColumns">
            <summary>Returns a number of table columns.</summary>
            <returns>the number of table columns</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultTable.GetCell(System.Int32,System.Int32)">
            <summary>Returns a cell with specified row and column indexes.</summary>
            <param name="row">index of row (from 1 to ...)</param>
            <param name="column">index of column (from 1 to ...)</param>
            <returns>Text cell if indexes are valid or <i>null</i> if they aren't.</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.ResultText">
            <summary>String presentation of recognized elements like Bunch, Line or Paragraph</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.ResultText.ToString">
            <summary>Returns a string presentation of recognized element.</summary>
            <returns>string presentation of recognized element</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Value.AbstractValueResult">
            <summary>Common abstract parent for all possible results.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.AbstractValueResult.#ctor(System.String)">
            <summary>Constructor for abstract result.</summary>
            <param name="resultType">the specific result type</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.AbstractValueResult.GetResultType">
            <summary>Get specific result type.</summary>
            <returns>specific result type.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.AbstractValueResult.CloneWithoutMeta">
            <summary>Clones this instance without metadata entries.</summary>
            <returns>clone of the current result without metadata</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Value.Group.GroupEntryResult">
            <summary>Class representing single group result's entry.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Group.GroupEntryResult.#ctor(System.String,System.Collections.Generic.IList{iText.Pdf2Data.Result.Value.AbstractValueResult})">
            <summary>Creates an instance of group result's entry representation.</summary>
            <param name="dataType">the group result's data type</param>
            <param name="results">the list of entry results</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Group.GroupEntryResult.GetDataType">
            <summary>Get group entry data type.</summary>
            <returns>group entry data type</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Group.GroupEntryResult.GetResults">
            <summary>Get group entry results.</summary>
            <returns>list of group entry results</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Value.Group.GroupResult">
            <summary>Class which represents group results.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Group.GroupResult.#ctor(System.Collections.Generic.IDictionary{System.String,iText.Pdf2Data.Result.Value.Group.GroupEntryResult})">
            <summary>Creates an instance of group result.</summary>
            <param name="entries">the group result entries map</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Group.GroupResult.GetEntries">
            <summary>Get group result entries.</summary>
            <returns>group result entries</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Value.ImageResult">
            <summary>Class which represents image result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.ImageResult.#ctor(iText.Pdf2Data.Result.Meta.PageLocationMetaResult,System.String)">
            <summary>Creates an instance of image result.</summary>
            <param name="pageLocationMeta">image page location</param>
            <param name="base64">representation of image bytes as base64 string</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.ImageResult.GetPageLocationMeta">
            <summary>Get image page location</summary>
            <returns>image page location</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.ImageResult.GetBase64">
            <summary>Get image base64 string</summary>
            <returns>image base64 string</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.ImageResult.GetBytes">
            <summary>Get image bytes.</summary>
            <returns>image bytes</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.ImageResult.GetImage">
            <summary>Get image object.</summary>
            <returns>image object</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Value.Table.TableCellResult">
            <summary>Class which represents single table cell result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableCellResult.#ctor(iText.Pdf2Data.Result.Meta.PageLocationMetaResult,iText.Pdf2Data.Result.Meta.FontMetaResult,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Creates an instance of table cell result.</summary>
            <param name="pageLocationMeta">cell's page location</param>
            <param name="fontMeta">cell's font metadata</param>
            <param name="rowspan">number of rows to which the current cell spans</param>
            <param name="colspan">number of columns to which the current cell spans</param>
            <param name="content">cell content</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableCellResult.GetPageLocationMeta">
            <summary>Get cell's page location.</summary>
            <returns>cell's page location</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableCellResult.GetFontMeta">
            <summary>Get cell's font metadata.</summary>
            <returns>cell's font metadata</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableCellResult.GetRowspan">
            <summary>Get number of rows to which the current cell spans.</summary>
            <returns>number of rows to which the current cell spans</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableCellResult.GetColspan">
            <summary>Get number of columns to which the current cell spans</summary>
            <returns>number of columns to which the current cell spans</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableCellResult.GetContent">
            <summary>Get cell content.</summary>
            <returns>cell content</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Value.Table.TableResult">
            <summary>Class which represents table result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableResult.#ctor(System.Collections.Generic.IList{iText.Pdf2Data.Result.Meta.PageLocationMetaResult},System.Collections.Generic.IList{iText.Pdf2Data.Result.Value.Table.TableRowResult})">
            <summary>Creates an instance of table result.</summary>
            <param name="pageLocationMetas">the list of page locations of the table</param>
            <param name="rows">table rows</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableResult.GetPageLocationMetas">
            <summary>Get table page locations.</summary>
            <returns>table page locations</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableResult.GetRows">
            <summary>Get table rows.</summary>
            <returns>table rows list</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Value.Table.TableRowResult">
            <summary>Class which represents table row result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableRowResult.#ctor(iText.Pdf2Data.Result.Meta.PageLocationMetaResult,System.Collections.Generic.IList{iText.Pdf2Data.Result.Value.Table.TableCellResult})">
            <summary>Creates an instance of table row result.</summary>
            <param name="pageLocationMeta">row page location</param>
            <param name="cells">row cells</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableRowResult.GetPageLocationMeta">
            <summary>Get row's page location.</summary>
            <returns>row's page location</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.Table.TableRowResult.GetCells">
            <summary>Get row cells.</summary>
            <returns>list of row cells</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Value.TextResult">
            <summary>Class representing text result.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.TextResult.#ctor(iText.Pdf2Data.Result.Meta.PageLocationMetaResult,iText.Pdf2Data.Result.Meta.FontMetaResult,System.String)">
            <summary>Creates an instance of text result.</summary>
            <param name="pageLocationMeta">text page location</param>
            <param name="fontMeta">text font metadata</param>
            <param name="content">text content</param>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.TextResult.GetPageLocationMeta">
            <summary>Get text page location.</summary>
            <returns>text page location</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.TextResult.GetFontMeta">
            <summary>Get text font metadata.</summary>
            <returns>text font metadata</returns>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.TextResult.GetContent">
            <summary>Get text content.</summary>
            <returns>text content.</returns>
        </member>
        <member name="T:iText.Pdf2Data.Result.Value.UnknownResult">
            <summary>Class which representing unknown result type.</summary>
            <remarks>
            Class which representing unknown result type.
            <para />
            Mainly used on deserializing the result when unknown result type met.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Result.Value.UnknownResult.#ctor(System.String)">
            <summary>Creates an instance of unknown result type.</summary>
            <param name="resultType">unknown result type</param>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Base.AbstractSelector">
            <summary>Abstract class for selectors with select method implementation.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.BoundarySelector.GetBbox">
            <summary>Gets selector location.</summary>
            <returns>location of selector</returns>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Impl.BoundarySelector.Builder">
            <summary>
            Class is used for building instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.BoundarySelector"/>.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.BoundarySelector.Builder.#ctor(iText.Pdf2Data.Structure.Geom.Rectangle)">
            <summary>
            Constructs new instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.BoundarySelector.Builder"/>
            with passed parameter.
            </summary>
            <param name="rect">location of selector. If location is missed, zero values will be set</param>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.BoundarySelector.Builder.Top">
            <summary>Sets that top boundary is used.</summary>
            <returns>builder instance</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.BoundarySelector.Builder.Bottom">
            <summary>Sets that bottom boundary is used.</summary>
            <returns>builder instance</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.BoundarySelector.Builder.Left">
            <summary>Sets that left boundary is used.</summary>
            <returns>builder instance</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.BoundarySelector.Builder.Right">
            <summary>Sets that right boundary is used.</summary>
            <returns>builder instance</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.BoundarySelector.Builder.All">
            <summary>Sets that all boundaries are used.</summary>
            <returns>builder instance</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.BoundarySelector.Builder.Build">
            <summary>
            Builds new
            <see cref="T:iText.Pdf2Data.Selector.Impl.BoundarySelector"/>
            with set parameters.
            </summary>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.BoundarySelector"/>
            instance
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Impl.Composite.AbstractCompositeSelector">
            <summary>This class represents an abstract composite selector.</summary>
            <remarks>
            This class represents an abstract composite selector. It is used as a parent for selectors that contain inner
            selectors.
            </remarks>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Impl.Group.GrouperUtils">
            <summary>Class contains common methods for group selectors.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.GrouperUtils.GetCoefficientByWord(System.String)">
            <summary>Get coefficient, which corresponds passed string spacing.</summary>
            <param name="spacing">spacing to correspond</param>
            <returns>coefficient, which corresponds passed string spacing</returns>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper">
            <summary>Class for extracting paragraphs suitable for specified parameters.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.#ctor">
            <summary>
            Creates new
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.GetParagraphNames">
            <summary>
            Gets list of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            paragraph names.
            </summary>
            <returns>list of paragraph names</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.IsNamed">
            <summary>
            Gets whether
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            is named.
            </summary>
            <returns>
            true, if
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            is named, false otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.GetLineSpacing">
            <summary>
            Gets line spacing of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>.
            </summary>
            <returns>
            line spacing of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.IsRunningText">
            <summary>Gets whether paragraph sentences delimiters are spaces or \n.</summary>
            <returns>if true paragraph sentence delimiters will be spaces, \n otherwise</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.IsExcludeParagraphName">
            <summary>Gets whether paragraph name will be excluded in extraction results.</summary>
            <returns>true, if paragraph name excluded in extraction results, false otherwise</returns>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder">
            <summary>
            Builder for creating
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder.#ctor">
            <summary>
            Creates
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder.LineSpacing(System.String)">
            <summary>
            Sets line spacing of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            selector.
            </summary>
            <param name="lineSpacing">line spacing to set</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder.ParagraphNames(System.Collections.Generic.IList{System.String})">
            <summary>
            Sets paragraph name list of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            selector.
            </summary>
            <param name="paragraphNames">paragraph name list to set</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder.RunningText(System.Boolean)">
            <summary>
            Defines, whether sentence delimiters of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            selector will be spaces or \n.
            </summary>
            <param name="isRunningText">if true paragraph sentence delimiters will be spaces, \n otherwise</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder.ExcludeParagraphName(System.Boolean)">
            <summary>Defines, whether paragraph name will be excluded in extraction results</summary>
            <param name="excludeParagraphName">
            if true, paragraph name will be excluded in extraction results, will be included
            otherwise
            </param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper.Builder.Build">
            <summary>
            Builds new
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            instance.
            </summary>
            <returns>
            new
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            instance
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Impl.ImageSelector.Dimension">
            <summary>Class which represents image selector dimensions.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.ImageSelector.Dimension.#ctor(System.String)">
            <summary>
            Constructs new
            <see cref="T:iText.Pdf2Data.Selector.Impl.ImageSelector.Dimension"/>
            representing passed string.
            </summary>
            <param name="s">dimension string representation</param>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.ImageSelector.Dimension.GetSize">
            <summary>Gets size of dimension.</summary>
            <returns>dimension size</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.ImageSelector.Dimension.GetUnit">
            <summary>Gets unit of dimension.</summary>
            <returns>dimension unit</returns>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector">
            <summary>Class for extracting tables using cluster algorithm.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector.GetHeadersForUserMode">
            <summary>Gets list of headers for viewing them in user mode of web editor.</summary>
            <returns>headers list</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector.GetDeterminingColumn">
            <summary>Gets index of determining column.</summary>
            <returns>index of determining column</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector.GetHeaders">
            <summary>Gets selector headers list.</summary>
            <returns>selector headers list</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Table.FrequencyTableSelector.GetRect">
            <summary>Gets location of current selector.</summary>
            <returns>selector location</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Table.TableSelector.GetHeaders">
            <summary>Gets selector headers list.</summary>
            <returns>selector headers list</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.AlignSelector.GetLeft">
            <summary>Gets left align boundary.</summary>
            <returns>left align boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.AlignSelector.GetRight">
            <summary>Gets right align boundary.</summary>
            <returns>right align boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector.#ctor(System.String)">
            <summary>
            Creates new instance of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector"/>
            with passed font name.
            </summary>
            <param name="fontName">font name to set</param>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector.GetFontName">
            <summary>Gets font name of selector.</summary>
            <returns>selector font name</returns>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Impl.Text.FontSelector">
            <summary>Class for extracting text with the given font size, font styles or font name.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontSelector.#ctor(iText.Pdf2Data.Selector.Impl.Text.FontNameSelector,iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector,iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector)">
            <summary>
            Creates new
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSelector"/>
            with passed inner selectors.
            </summary>
            <param name="fontName">
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector"/>
            to set
            </param>
            <param name="fontSize">
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector"/>
            to set
            </param>
            <param name="fontStyle">
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector"/>
            to set
            </param>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontSelector.GetFontNameSelector">
            <summary>
            Gets inner
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector"/>
            of current selector.
            </summary>
            <returns>
            inner
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontSelector.GetFontSizeSelector">
            <summary>
            Gets inner
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector"/>
            of current selector.
            </summary>
            <returns>
            inner
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontSelector.GetFontStyleSelector">
            <summary>
            Gets inner
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector"/>
            of current selector.
            </summary>
            <returns>
            inner
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector.GetFontSize">
            <summary>Gets selector font size.</summary>
            <returns>selector font size</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector.GetEffectiveStyleMask">
            <summary>Gets effective style mask.</summary>
            <returns>effective style mask</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector.GetAnnotationStyleMask">
            <summary>Gets annotation style mask.</summary>
            <returns>annotation style mask</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector.CreateStyleString(System.Int32)">
            <summary>Creates list with styles selected for the selector.</summary>
            <param name="mask">styles int mask</param>
            <returns>list with styles selected for the selector</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector.IsStyleSelected(System.Int32,System.Int32)">
            <summary>
            Check if passed style is selected for current
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector"/>
            instance.
            </summary>
            <param name="mask">style mask to check</param>
            <param name="style">style to check</param>
            <returns>
            
            <see langword="true"/>
            if style is selected,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.RegExpSelector.GetLeftThres">
            <summary>Gets left threshold.</summary>
            <returns>left threshold.</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.RegExpSelector.GetRightThres">
            <summary>Gets right threshold.</summary>
            <returns>right threshold.</returns>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector">
            <summary>Class for extracting values suitable for specified pattern.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.#ctor">
            <summary>
            Creates new
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.GetKeywords">
            <summary>
            Gets keywords of inner special selectors of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>.
            </summary>
            <returns>keywords of inner special selectors</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.GetPrefixes">
            <summary>
            Gets list of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            prefixes.
            </summary>
            <returns>list of prefixes</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.GetSuffixes">
            <summary>
            Gets list of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            suffixes.
            </summary>
            <returns>list of suffixes</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.GetSpecialSelector">
            <summary>
            Gets inner special selector of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            selector.
            </summary>
            <returns>inner special selector</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.SetSpecialSelector(iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.KeywordSelector)">
            <summary>
            Sets inner special selector of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            selector.
            </summary>
            <param name="specialSelector">inner special selector to set</param>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.GetExpression">
            <summary>
            Gets expression of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            instance.
            </summary>
            <returns>specified expression</returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.SetExpression(System.String)">
            <summary>
            Sets expression of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>.
            </summary>
            <param name="expression">expression to set</param>
        </member>
        <member name="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder">
            <summary>
            Builder for creating
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder.#ctor">
            <summary>
            Creates
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder.Expression(System.String)">
            <summary>
            Sets expression of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            selector.
            </summary>
            <param name="expression">expression to set</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder.Keyword(System.String)">
            <summary>
            Sets keyword of inner selector of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            selector.
            </summary>
            <param name="keyword">keyword to set</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder.Prefixes(System.Collections.Generic.IList{System.String})">
            <summary>
            Sets prefix list of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            selector.
            </summary>
            <param name="prefixes">prefix list to set</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder.Suffixes(System.Collections.Generic.IList{System.String})">
            <summary>
            Sets suffix list of
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            selector.
            </summary>
            <param name="suffixes">prefix list to set</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector.Builder.Build">
            <summary>
            Builds new
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            instance.
            </summary>
            <returns>
            new
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.SimpleRESelector"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.DateSelector.GetDatePattern">
            <summary>
            Gets date pattern for current
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.Special.Impl.DateSelector"/>
            instance.
            </summary>
            <returns>specified date pattern</returns>
        </member>
        <member name="T:iText.Pdf2Data.Selector.SelectorConstants">
            <summary>Class for storing constants which are used in selector classes.</summary>
        </member>
        <member name="T:iText.Pdf2Data.SerializationProperties">
            <summary>
            The
            <c>SerializationProperties</c>
            class represents properties of serialization.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.SerializationProperties.#ctor">
            <summary>
            Creates an instance of properties with default state of extracting metadata as
            <see langword="false"/>.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.SerializationProperties.IsIncludeMetaData">
            <summary>Returns a state of extracting metadata.</summary>
            <returns>state of extracting metadata</returns>
        </member>
        <member name="M:iText.Pdf2Data.SerializationProperties.SetIncludeMetaData(System.Boolean)">
            <summary>Sets if metadata will be extracted during serialization.</summary>
            <param name="includeMetaData">state of extracting metadata</param>
            <returns>the current instance</returns>
        </member>
        <member name="T:iText.Pdf2Data.Structure.Text.FilteredOverlappingSpacesTPISentence">
            <summary>
            Represents a proxy on
            <see cref="T:iText.Pdf2Data.Structure.Text.TPISentence"/>
            which can filter overlapping text spaces during
            sentence construction.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Structure.Text.FilteredOverlappingSpacesTPISentence.AddWithFiltering(iText.Pdf2Data.Structure.PIBunch)">
            <summary>Filters incoming bunches, not adding spaces which seem to overlap with the original text.</summary>
            <param name="bunch">bunch to be added</param>
        </member>
        <member name="M:iText.Pdf2Data.Structure.Text.FilteredOverlappingSpacesTPISentence.CreateEmptyForPostProcessing">
            <summary>
            Creates empty
            <see cref="T:iText.Pdf2Data.Structure.Text.FilteredOverlappingSpacesTPISentence"/>
            and sets
            <see cref="F:iText.Pdf2Data.Structure.Text.FilteredOverlappingSpacesTPISentence.wereWhitespacesFiltered"/>
            flag same as in the current sentence so the correct string representation were returned.
            </summary>
            <remarks>
            Creates empty
            <see cref="T:iText.Pdf2Data.Structure.Text.FilteredOverlappingSpacesTPISentence"/>
            and sets
            <see cref="F:iText.Pdf2Data.Structure.Text.FilteredOverlappingSpacesTPISentence.wereWhitespacesFiltered"/>
            flag same as in the current sentence so the correct string representation were returned.
            Also, current sentence enters filtered bunch mode, so filtered list of bunches is returned upon
            <see cref="M:iText.Pdf2Data.Structure.Text.FilteredOverlappingSpacesTPISentence.GetBunchList"/>
            call.
            </remarks>
            <returns>
            new
            <see cref="T:iText.Pdf2Data.Structure.Text.FilteredOverlappingSpacesTPISentence"/>
            instance.
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Structure.Text.TPISentence">
            <summary>Represents a sentence.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Structure.Text.TPISentence.CreateEmptyForPostProcessing">
            <summary>
            Creates empty
            <see cref="T:iText.Pdf2Data.Structure.Text.TPISentence"/>
            for editing/re-adding symbols to it from the original sentence.
            </summary>
            <returns>
            new
            <see cref="T:iText.Pdf2Data.Structure.Text.TPISentence"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Structure.TPIGroup.GetPage">
            <summary>Return a page of group.</summary>
            <returns>page number, 1-based</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.FitResult">
            <summary>Class for storing processed template and exceptions which occurs during processing.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.FitResult.#ctor(iText.Pdf2Data.Dto.Json.Templates.TemplateDTO,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates new
            <see cref="T:iText.Pdf2Data.Templatev3.FitResult"/>
            with passed parameters.
            </summary>
            <param name="fittedTemplate">processed template</param>
            <param name="fittingErrors">map with errors which occurred during fitting</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.FitResult.GetFittedTemplate">
            <summary>Gets processed template.</summary>
            <returns>processed template</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.FitResult.GetFittingErrors">
            <summary>Gets errors which occurred during fitting.</summary>
            <returns>map containing fitting errors</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.FitResult.HasErrors">
            <summary>Checks if current fit result has fitting errors.</summary>
            <returns>
            
            <see langword="true"/>
            if current fit result has fitting errors,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.ParsingTemplateResult">
            <summary>Class for storing parsed template and exception which occurs during parsing.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.ParsingTemplateResult.#ctor(iText.Pdf2Data.Dto.Json.Templates.TemplateDTO,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates new
            <see cref="T:iText.Pdf2Data.Templatev3.ParsingTemplateResult"/>
            with passed parameters.
            </summary>
            <param name="parsedTemplate">parsed template</param>
            <param name="parsingErrors">map with errors which occurs during parsing</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.ParsingTemplateResult.GetParsedTemplate">
            <summary>Gets parsed template.</summary>
            <returns>parsed template</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.ParsingTemplateResult.GetParsingErrors">
            <summary>Gets errors which occurred during parsing.</summary>
            <returns>map containing parsing errors</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.ParsingTemplateResult.HasErrors">
            <summary>Checks if current parsing result has parsing errors.</summary>
            <returns>
            
            <see langword="true"/>
            if current parsing result has parsing errors,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.PdfTemplateProcessor">
            <summary>Contains methods for processing legacy templates.</summary>
            <remarks>
            Contains methods for processing legacy templates.
            <para />
            For internal usages only.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.PdfTemplateProcessor.RemoveAnnotations(iText.Pdf2Data.DocumentSource,System.IO.Stream)">
            <summary>
            Remove annotation from passed
            <see cref="T:iText.Pdf2Data.DocumentSource"/>.
            </summary>
            <param name="documentSource">document source from which you want to remove annotations</param>
            <param name="outputStream">stream to which result will be written</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.PdfTemplateProcessor.ParseUnprocessedTemplate(iText.Pdf2Data.DocumentSource)">
            <summary>
            Parse unprocessed template from passed
            <see cref="T:iText.Pdf2Data.DocumentSource"/>.
            </summary>
            <param name="documentSource">document source from which template will be parsed</param>
            <returns>
            instance of
            <see cref="T:iText.Pdf2Data.Templatev3.ParsingTemplateResult"/>
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.SelectorV3EnumMapper">
            <summary>Class for converting XmlV3 dto enum properties to their respective properties in selectors.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.SelectorV3EnumMapper.ConvertToAlignFilter(System.String)">
            <summary>
            Converts
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.AlignFilter?"/>
            from its string representation.
            </summary>
            <param name="toConvert">string filter to convert</param>
            <returns>
            converted
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.AlignFilter?"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.SelectorV3EnumMapper.ConvertToBarcodeFormat(System.String)">
            <summary>
            Converts
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.BarcodeFormat?"/>
            from its string representation.
            </summary>
            <param name="toConvert">string barcode format to convert</param>
            <returns>
            converted
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.BarcodeFormat?"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.SelectorV3EnumMapper.ConvertToCharSpacing(System.String)">
            <summary>
            Converts
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.CharSpacing?"/>
            from its string representation.
            </summary>
            <param name="toConvert">string char spacing convert</param>
            <returns>
            converted
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.CharSpacing?"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.SelectorV3EnumMapper.ConvertToGroupType(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.PickerGroupTypeXmlV3)">
            <summary>
            Converts
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType?"/>
            from its xml v3 enum representation.
            </summary>
            <param name="toConvert">group type to convert</param>
            <returns>
            converted
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType?"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.SelectorV3EnumMapper.ConvertToGroupType(System.String)">
            <summary>
            Converts
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType?"/>
            from its string representation.
            </summary>
            <param name="toConvert">string group type to convert</param>
            <returns>
            converted
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.PickerGroupingType?"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.SelectorV3EnumMapper.ConvertToLineSpacing(System.String)">
            <summary>
            Converts
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.LineSpacing?"/>
            from its string representation.
            </summary>
            <param name="toConvert">string line spacing to convert</param>
            <returns>
            converted
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.LineSpacing?"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.SelectorV3EnumMapper.ConvertToHeadersFormat(System.String)">
            <summary>
            Converts
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.TableHeadersFormat?"/>
            from its string representation.
            </summary>
            <param name="toConvert">string headers format to convert</param>
            <returns>
            converted
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.TableHeadersFormat?"/>
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.SelectorV3EnumMapper.ConvertToFontStylesList(System.Int32)">
            <summary>
            Converts a style mask to a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles?"/>
            enums.
            </summary>
            <param name="styleMask">the style mask to convert</param>
            <returns>
            a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of corresponding
            <see cref="!:iText.Pdf2Data.Dto.Json.Selectors.Enums.FontStyles?"/>
            enums
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.XmlTemplateProcessor">
            <summary>Contains methods for processing legacy xml templates.</summary>
            <remarks>
            Contains methods for processing legacy xml templates.
            <para />
            For internal usages only.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.XmlTemplateProcessor.ParseXml(System.IO.Stream)">
            <summary>Parse template from given xml stream.</summary>
            <param name="xmlInputStream">stream containing xml template</param>
            <returns>
            processed
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Template.DataField"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3.#ctor(System.Boolean,System.Boolean,System.String,System.Int32,System.Collections.Generic.IList{iText.Pdf2Data.Templatev3.Xml.Dto.Selector.SelectorXmlV3})">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3"/>
            with the specified attributes.
            </summary>
            <param name="oneOrMore">specifies if the data field has one or more occurrences</param>
            <param name="zeroOrOne">specifies if the data field has zero or one occurrence</param>
            <param name="name">the name of the data field</param>
            <param name="page">the page number where the data field is located</param>
            <param name="selectorList">the list of selectors associated with the data field</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3.IsOneOrMore">
            <summary>Checks if the data field has one or more occurrences.</summary>
            <returns>
            
            <see langword="true"/>
            if the data field has one or more occurrences,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3.IsZeroOrOne">
            <summary>Checks if the data field has zero or one occurrence.</summary>
            <returns>
            
            <see langword="true"/>
            if the data field has zero or one occurrence,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3.GetName">
            <summary>Gets the name of the data field.</summary>
            <returns>the name of the data field</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3.GetPage">
            <summary>Gets the page number where the data field is located.</summary>
            <returns>the page number where the data field is located</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3.GetSelectorList">
            <summary>Gets the list of selectors associated with the data field.</summary>
            <returns>the list of selectors associated with the data field</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AbstractRangeSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Base.RangeSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AbstractRangeSelectorXmlV3.#ctor(System.Int32,System.Int32)">
            <summary>Constructor to initialize the range selector properties.</summary>
            <param name="firstIndex">the index of the first item in the range</param>
            <param name="lastIndex">the index of the last item in the range</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AbstractRangeSelectorXmlV3.GetFirstIndex">
            <summary>Get the index of the first item in the range.</summary>
            <returns>the index of the first item</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AbstractRangeSelectorXmlV3.GetLastIndex">
            <summary>Get the index of the last item in the range.</summary>
            <returns>the index of the last item</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AlignSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.AlignSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AlignSelectorXmlV3.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AlignSelectorXmlV3"/>
            with the specified parameters.
            </summary>
            <param name="alignFilter">the align filter string for alignment-based filtering</param>
            <param name="left">the left boundary for alignment filtering</param>
            <param name="right">the right boundary for alignment filtering</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AlignSelectorXmlV3.GetAlignFilter">
            <summary>Gets the align filter string for alignment-based filtering.</summary>
            <returns>align filter string</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AlignSelectorXmlV3.GetLeft">
            <summary>Gets the left boundary for alignment filtering.</summary>
            <returns>the left boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AlignSelectorXmlV3.GetRight">
            <summary>Gets the right boundary for alignment filtering.</summary>
            <returns>the right boundary</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.BarcodeSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3"/>
            with the specified parameters.
            </summary>
            <param name="top">the top boundary for barcode selection</param>
            <param name="bottom">the bottom boundary for barcode selection</param>
            <param name="left">the left boundary for barcode selection</param>
            <param name="right">the right boundary for barcode selection</param>
            <param name="all1D">flag indicating whether to select all 1D barcodes</param>
            <param name="all2D">flag indicating whether to select all 2D barcodes</param>
            <param name="format">the barcode format string for filtering specific barcode types</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3.GetTop">
            <summary>Gets the top boundary for barcode selection.</summary>
            <returns>the top boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3.GetBottom">
            <summary>Gets the bottom boundary for barcode selection.</summary>
            <returns>the bottom boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3.GetLeft">
            <summary>Gets the left boundary for barcode selection.</summary>
            <returns>the left boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3.GetRight">
            <summary>Gets the right boundary for barcode selection.</summary>
            <returns>the right boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3.IsAll1D">
            <summary>Checks if all 1D barcodes should be selected.</summary>
            <returns>
            
            <see langword="true"/>
            if all 1D barcodes should be selected,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3.IsAll2D">
            <summary>Checks if all 2D barcodes should be selected.</summary>
            <returns>
            
            <see langword="true"/>
            if all 2D barcodes should be selected,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3.GetFormat">
            <summary>Gets the barcode format string for filtering specific barcode types.</summary>
            <returns>the barcode format string</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.BoundarySelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3"/>
            with the specified parameters.
            </summary>
            <param name="topUsed">flag indicating whether the top boundary is used for selection</param>
            <param name="bottomUsed">flag indicating whether the bottom boundary is used for selection</param>
            <param name="rightUsed">flag indicating whether the right boundary is used for selection</param>
            <param name="leftUsed">flag indicating whether the left boundary is used for selection</param>
            <param name="top">the top boundary value for selection</param>
            <param name="bottom">the bottom boundary value for selection</param>
            <param name="left">the left boundary value for selection</param>
            <param name="right">the right boundary value for selection</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3.IsTopUsed">
            <summary>Checks if the top boundary is used for selection.</summary>
            <returns>
            
            <see langword="true"/>
            if the top boundary is used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3.IsBottomUsed">
            <summary>Checks if the bottom boundary is used for selection.</summary>
            <returns>
            
            <see langword="true"/>
            if the bottom boundary is used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3.IsRightUsed">
            <summary>Checks if the right boundary is used for selection.</summary>
            <returns>
            
            <see langword="true"/>
            if the right boundary is used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3.IsLeftUsed">
            <summary>Checks if the left boundary is used for selection.</summary>
            <returns>
            
            <see langword="true"/>
            if the left boundary is used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3.GetTop">
            <summary>Gets the top boundary value for selection.</summary>
            <returns>the top boundary value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3.GetBottom">
            <summary>Gets the bottom boundary value for selection.</summary>
            <returns>the bottom boundary value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3.GetLeft">
            <summary>Gets the left boundary value for selection.</summary>
            <returns>the left boundary value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3.GetRight">
            <summary>Gets the left boundary value for selection.</summary>
            <returns>the right boundary value</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.ImageDimensionUnitXmlV3">
            <summary>Enumeration of units for specifying image dimensions in XML templates.</summary>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.ImageDimensionXmlV3">
            <summary>Represents the dimensions of an image in XML templates.</summary>
            <remarks>
            Represents the dimensions of an image in XML templates.
            Provides methods to parse, store, and format image dimensions.
            </remarks>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.ImageDimensionXmlV3.#ctor(System.String)">
            <summary>Constructor to parse and create an instance from a dimension string.</summary>
            <param name="dimension">the dimension string</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.ImageDimensionXmlV3.GetSize">
            <summary>Get the size of the image dimension.</summary>
            <returns>the size value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.ImageDimensionXmlV3.GetUnit">
            <summary>Get the unit of the image dimension.</summary>
            <returns>the unit</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.PickerGroupTypeXmlV3">
            <summary>Enumeration of picker group types for XML templates.</summary>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.AbstractBunchSelectorXmlV3">
            <summary>Abstract base class for bunch selectors in XML templates.</summary>
            <remarks>
            Abstract base class for bunch selectors in XML templates.
            Extends
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.SelectorXmlV3"/>
            to provide common functionality for bunch selectors.
            </remarks>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontColorSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontColorSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontColorSelectorXmlV3.#ctor(System.String,System.Double,System.Boolean)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontColorSelectorXmlV3"/>
            with the specified parameters.
            </summary>
            <param name="rgbString">the string representing the font color in RGB format</param>
            <param name="tolerance">the tolerance value for comparing colors</param>
            <param name="useBunchColor">
            
            <see langword="true"/>
            if using the bunch color,
            <see langword="false"/>
            otherwise
            </param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontColorSelectorXmlV3.GetRgbString">
            <summary>Gets the RGB string representing the font color.</summary>
            <returns>the RGB string</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontColorSelectorXmlV3.GetTolerance">
            <summary>Gets the tolerance value for comparing colors.</summary>
            <returns>the tolerance value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontColorSelectorXmlV3.IsUseBunchColor">
            <summary>Checks if the selector uses the bunch color.</summary>
            <returns>
            
            <see langword="true"/>
            if it uses the bunch color,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontNameSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontNameSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontNameSelectorXmlV3.#ctor(System.String)">
            <summary>
            Creates new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontNameSelectorXmlV3"/>
            with passed font name.
            </summary>
            <param name="fontName">font name to set</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontNameSelectorXmlV3.GetFontName">
            <summary>Gets font name of selector.</summary>
            <returns>selector font name</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSelectorXmlV3.#ctor(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontNameSelectorXmlV3,iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSizeSelectorXmlV3,iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontStyleSelectorXmlV3)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSelectorXmlV3"/>
            with the specified sub-selectors.
            </summary>
            <param name="fontName">the font name selector</param>
            <param name="fontSize">the font size selector</param>
            <param name="fontStyle">the font style selector</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSelectorXmlV3.GetFontNameSelector">
            <summary>Gets the font name selector.</summary>
            <returns>the font name selector</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSelectorXmlV3.GetFontSizeSelector">
            <summary>Gets the font size selector.</summary>
            <returns>the font size selector</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSelectorXmlV3.GetFontStyleSelector">
            <summary>Gets the font style selector.</summary>
            <returns>the font style selector</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSizeSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontSizeSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSizeSelectorXmlV3.#ctor(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSizeSelectorXmlV3"/>
            with the specified font size and optional maximum and
            minimum sizes.
            </summary>
            <param name="fontSize">the font size value</param>
            <param name="maxSize">the maximum font size value</param>
            <param name="minSize">the minimum font size value</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSizeSelectorXmlV3.GetFontSize">
            <summary>Gets the font size value.</summary>
            <returns>the font size value</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSizeSelectorXmlV3.GetMaxSize">
            <summary>Gets the maximum font size value if specified.</summary>
            <returns>
            the maximum font size value or
            <see langword="null"/>
            if not specified
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSizeSelectorXmlV3.GetMinSize">
            <summary>Gets the minimum font size value if specified.</summary>
            <returns>
            the minimum font size value or
            <see langword="null"/>
            if not specified
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontStyleSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.FontStyleSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontStyleSelectorXmlV3.#ctor(System.Int32)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontStyleSelectorXmlV3"/>
            with the specified effective style mask value.
            </summary>
            <param name="effectiveStyleMask">the effective style mask representing font styles</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontStyleSelectorXmlV3.GetEffectiveStyleMask">
            <summary>Gets the effective style mask representing font styles.</summary>
            <returns>the effective style mask value</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.GroupSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Postprocessing.GroupSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.GroupSelectorXmlV3.#ctor(System.String)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.GroupSelectorXmlV3"/>
            with the specified parent group.
            </summary>
            <param name="parent">parent group of the selector</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.GroupSelectorXmlV3.GetParent">
            <summary>Gets the parent group of the selector.</summary>
            <returns>parent group</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ImageSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.ImageSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ImageSelectorXmlV3.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Constructs a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ImageSelectorXmlV3"/>
            with specified parameters.
            </summary>
            <param name="first">the index of the first image in the image selector</param>
            <param name="last">the index of the last image in the image selector</param>
            <param name="minW">the minimum width dimension for the images</param>
            <param name="maxW">the maximum width dimension for the images</param>
            <param name="minH">the minimum height dimension for the images</param>
            <param name="maxH">the maximum height dimension for the images</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ImageSelectorXmlV3.GetMinWidth">
            <summary>Gets the minimum width of the image.</summary>
            <returns>the minimum width of the image</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ImageSelectorXmlV3.GetMaxWidth">
            <summary>Gets the maximum width of the image.</summary>
            <returns>the maximum width of the image</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ImageSelectorXmlV3.GetMinHeight">
            <summary>Gets the minimum height of the image.</summary>
            <returns>the minimum height of the image</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ImageSelectorXmlV3.GetMaxHeight">
            <summary>Gets the maximum height of the image.</summary>
            <returns>the maximum height of the image</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.LineSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Base.LineSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.LineSelectorXmlV3.#ctor(System.String)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.LineSelectorXmlV3"/>
            with the specified character spacing.
            </summary>
            <param name="charSpacing">the character spacing of the line</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.LineSelectorXmlV3.GetCharSpacing">
            <summary>Gets the character spacing of the line.</summary>
            <returns>the character spacing of the line</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PageSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.PageSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PageSelectorXmlV3.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PageSelectorXmlV3"/>
            with the specified page numbers.
            </summary>
            <param name="firstPage">the first page number of the selected pages</param>
            <param name="lastPage">the last page number of the selected pages</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PageSelectorXmlV3.GetFirstPage">
            <summary>Gets the first page number of the selected pages.</summary>
            <returns>the first page number of the selected pages</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PageSelectorXmlV3.GetLastPage">
            <summary>Gets the last page number of the selected pages.</summary>
            <returns>the last page number of the selected pages</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ParagraphSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Group.ParagraphGrouper"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ParagraphSelectorXmlV3.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ParagraphSelectorXmlV3"/>
            with the specified attributes.
            </summary>
            <param name="lineSpacing">the line spacing attribute for the selected paragraphs</param>
            <param name="named">the named attribute for the selected paragraphs</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ParagraphSelectorXmlV3.GetLineSpacing">
            <summary>Gets the line spacing attribute for the selected paragraphs.</summary>
            <returns>the line spacing attribute for the selected paragraphs</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ParagraphSelectorXmlV3.GetNamed">
            <summary>Gets the named attribute for the selected paragraphs.</summary>
            <returns>the named attribute for the selected paragraphs</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PickerSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Picker"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PickerSelectorXmlV3.#ctor(System.Int32,System.Int32,iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.PickerGroupTypeXmlV3)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PickerSelectorXmlV3"/>
            with the specified ranges and group type.
            </summary>
            <param name="firstIndex">the index of the first range in the picker selector</param>
            <param name="lastIndex">the index of the last range in the picker selector</param>
            <param name="groupType">the group type for the picker selector</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PickerSelectorXmlV3.GetGroupType">
            <summary>Gets the group type for the picker selector.</summary>
            <returns>the group type for the picker selector</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Text.Regexp.RegExpSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Int32,System.Int32,System.Boolean,System.Double,System.Double)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3"/>
            with the specified attributes.
            </summary>
            <param name="keyword">the keyword associated with the regular expression selector</param>
            <param name="patternList">the list of patterns to match with regular expressions</param>
            <param name="numberOfPatterns">the number of patterns in the selector</param>
            <param name="idxAnswer">the index of the answer (select line) in the patterns</param>
            <param name="checkLocation">indicates whether to check the location in the pattern</param>
            <param name="leftThres">the left threshold for matching patterns</param>
            <param name="rightThres">the right threshold for matching patterns</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3.GetKeyword">
            <summary>Gets the keyword associated with the regular expression selector.</summary>
            <returns>the keyword associated with the regular expression selector</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3.GetPatternList">
            <summary>Gets the list of patterns to match with regular expressions.</summary>
            <returns>the list of patterns to match with regular expressions</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3.GetNumberOfPatterns">
            <summary>Gets the number of patterns in the selector.</summary>
            <returns>the number of patterns in the selector</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3.GetIdxAnswer">
            <summary>Gets the index of the answer (select line) in the patterns.</summary>
            <returns>the index of the answer (select line) in the patterns</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3.IsCheckLocation">
            <summary>Checks if the selector should check the location in the pattern.</summary>
            <returns>
            
            <see langword="true"/>
            if the location should be checked,
            <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3.GetLeftThres">
            <summary>Gets the left threshold for matching patterns.</summary>
            <returns>the left threshold for matching patterns</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3.GetRightThres">
            <summary>Gets the right threshold for matching patterns.</summary>
            <returns>the right threshold for matching patterns</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RelativeBoundarySelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.RelativeBoundarySelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RelativeBoundarySelectorXmlV3.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RelativeBoundarySelectorXmlV3"/>
            with the specified attributes.
            </summary>
            <param name="topUsed">specifies if the top boundary is used for selection</param>
            <param name="bottomUsed">specifies if the bottom boundary is used for selection</param>
            <param name="rightUsed">specifies if the right boundary is used for selection</param>
            <param name="leftUsed">specifies if the left boundary is used for selection</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RelativeBoundarySelectorXmlV3.IsTopUsed">
            <summary>Checks if the top boundary is used for selection.</summary>
            <returns>
            
            <see langword="true"/>
            if the top boundary is used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RelativeBoundarySelectorXmlV3.IsBottomUsed">
            <summary>Checks if the bottom boundary is used for selection.</summary>
            <returns>
            
            <see langword="true"/>
            if the bottom boundary is used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RelativeBoundarySelectorXmlV3.IsRightUsed">
            <summary>Checks if the right boundary is used for selection.</summary>
            <returns>
            
            <see langword="true"/>
            if the right boundary is used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RelativeBoundarySelectorXmlV3.IsLeftUsed">
            <summary>Checks if the left boundary is used for selection.</summary>
            <returns>
            
            <see langword="true"/>
            if the left boundary is used,
            <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.SelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Base.Selector"/>
            in xml format.
            </summary>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Base.AbstractTableSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>Constructor to initialize table selector properties.</summary>
            <param name="firstRow">the index of the first row to select</param>
            <param name="lastRow">the index of the last row to select</param>
            <param name="firstColumn">the index of the first column to select</param>
            <param name="lastColumn">the index of the last column to select</param>
            <param name="namedColumn">the name of a named column to select</param>
            <param name="format">the format to apply to the selected table data</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3.GetFirstRow">
            <summary>Get the index of the first row to select.</summary>
            <returns>the index of the first row</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3.GetLastRow">
            <summary>Get the index of the last row to select.</summary>
            <returns>the index of the last row</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3.GetFirstColumn">
            <summary>Get the index of the first column to select.</summary>
            <returns>the index of the first column</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3.GetLastColumn">
            <summary>Get the index of the last column to select.</summary>
            <returns>the index of the last column</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3.GetNamedColumn">
            <summary>Get the name of a named column to select.</summary>
            <returns>the name of the named column</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3.GetFormat">
            <summary>Get the format to apply to the selected table data.</summary>
            <returns>the format string</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.ClusterTableSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.ClusterTableSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.ClusterTableSelectorXmlV3.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.ClusterTableSelectorXmlV3"/>
            with the specified parameters.
            </summary>
            <param name="firstRow">the first row index to select from the cluster table</param>
            <param name="lastRow">the last row index to select from the cluster table</param>
            <param name="firstColumn">the first column index to select from the cluster table</param>
            <param name="lastColumn">the last column index to select from the cluster table</param>
            <param name="namedColumn">the name of a specific column to select from the cluster table</param>
            <param name="format">the format to apply for custom selection criteria</param>
            <param name="determiningColumn">the determining column index for the cluster table</param>
            <param name="headers">the headers for the cluster table</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.ClusterTableSelectorXmlV3.GetDeterminingColumn">
            <summary>Gets the determining column index for the cluster table.</summary>
            <returns>the determining column index</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.ClusterTableSelectorXmlV3.GetHeaders">
            <summary>Gets the headers for the cluster table.</summary>
            <returns>the headers list</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.FrequencyTableSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.FrequencyTableSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.FrequencyTableSelectorXmlV3.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.FrequencyTableSelectorXmlV3"/>
            with the specified parameters.
            </summary>
            <param name="firstRow">the first row index to select from the frequency table</param>
            <param name="lastRow">the last row index to select from the frequency table</param>
            <param name="firstColumn">the first column index to select from the frequency table</param>
            <param name="lastColumn">the last column index to select from the frequency table</param>
            <param name="namedColumn">the name of a specific column to select from the frequency table</param>
            <param name="format">the format to apply for custom selection criteria</param>
            <param name="top">the top boundary for the frequency table</param>
            <param name="bottom">the bottom boundary for the frequency table</param>
            <param name="left">the left boundary for the frequency table</param>
            <param name="right">the right boundary for the frequency table</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.FrequencyTableSelectorXmlV3.GetTop">
            <summary>Gets the top boundary for the frequency table.</summary>
            <returns>the top boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.FrequencyTableSelectorXmlV3.GetBottom">
            <summary>Gets the bottom boundary for the frequency table.</summary>
            <returns>the bottom boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.FrequencyTableSelectorXmlV3.GetLeft">
            <summary>Gets the left boundary for the frequency table.</summary>
            <returns>the left boundary</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.FrequencyTableSelectorXmlV3.GetRight">
            <summary>Gets the right boundary for the frequency table.</summary>
            <returns>the right boundary</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.TableSelectorXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Selector.Impl.Table.TableSelector"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.TableSelectorXmlV3.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.TableSelectorXmlV3"/>
            with the specified parameters.
            </summary>
            <param name="firstRow">the first row index to select from the table</param>
            <param name="lastRow">the last row index to select from the table</param>
            <param name="firstColumn">the first column index to select from the table</param>
            <param name="lastColumn">the last column index to select from the table</param>
            <param name="namedColumn">the name of a specific column to select from the table</param>
            <param name="format">the format to apply for custom selection criteria</param>
            <param name="determiningColumn">the determining column index for the table</param>
            <param name="headers">the headers for the table</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.TableSelectorXmlV3.GetDeterminingColumn">
            <summary>Gets the determining column index for the table.</summary>
            <returns>the determining column index</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.TableSelectorXmlV3.GetHeaders">
            <summary>Gets the headers for the table.</summary>
            <returns>the headers list</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Dto.TemplateXmlV3">
            <summary>
            Class which represents
            <see cref="T:iText.Pdf2Data.Template.Template"/>
            in xml format.
            </summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.TemplateXmlV3.#ctor(System.Collections.Generic.IList{iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3})">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.TemplateXmlV3"/>
            with the specified list of data fields.
            </summary>
            <param name="dataFieldList">the list of data fields in the template</param>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Dto.TemplateXmlV3.GetDataFieldList">
            <summary>Gets the list of data fields in the template.</summary>
            <returns>the list of data fields in the template</returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper">
            <summary>Class for converting selector entity to proper XmlV3 dto class.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.SelectorXmlV3)">
            <summary>Correlates the passed entity with the proper converting method.</summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the successor of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.SelectorDTO"/>
            which represent passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertAlignSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AlignSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.AlignSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.AlignSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertBarcodeSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BarcodeSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BarcodeSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertBoundarySelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.BoundarySelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.BoundarySelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertClusterTableSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.ClusterTableSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.ClusterTableSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.ClusterTableSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertFontColorSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontColorSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontColorSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontColorSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertFontFamilySelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontNameSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontNameSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontFamilySelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontFamilySelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertFontSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertFontSizeSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSizeSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontSizeSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSizeSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontSizeSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertFontStyleSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontStyleSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Fonts.FontStyleSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontStyleSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Fonts.FontStyleSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertFrequencyTableSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.FrequencyTableSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.FrequencyTableSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.FrequencyTableSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertGroupSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.GroupSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.GroupSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.GroupSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.GroupSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertImageSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ImageSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ImageSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ImageSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertLineSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.LineSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.LineSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.LineSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertPageSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PageSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PageSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PageSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PageSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertParagraphSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ParagraphSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.ParagraphSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.ParagraphSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertPickerSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PickerSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.PickerSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.PickerSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertRegExpSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RegExpSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Patterns.RegExpSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertRelativeBoundarySelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RelativeBoundarySelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.RelativeBoundarySelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.RelativeBoundarySelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertTableSelectorXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.TableSelectorXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.TableSelectorXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Tables.TableSelectorDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertDoubleToComplexStructure(System.Collections.Generic.IList{System.Nullable{System.Double}})">
            <summary>
            Converts
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>.
            </summary>
            <param name="toConvert">double values, which will be converted to complex structure</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            with passed double values
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertImageDimensionToComplexStructure(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.ImageDimensionXmlV3,iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.ImageDimensionXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Domain.ImageDimensionXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>.
            </summary>
            <param name="firstDimension">minimal image dimension</param>
            <param name="secondDimension">maximal image dimension</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            with passed dimensions
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertIntegerToComplexStructure(System.Collections.Generic.IList{System.Nullable{System.Int32}})">
            <summary>
            Converts
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>.
            </summary>
            <param name="toConvert">integer values, which will be converted to complex structure</param>
            <returns>with passed integer values</returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertRowAndColumnToComplexStructures(iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3)">
            <summary>
            Converts row and column of passed successor of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3"/>
            to
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            which will represents row/colum in json format.
            </summary>
            <remarks>
            Converts row and column of passed successor of
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.Selector.Tables.AbstractTableSelectorXmlV3"/>
            to
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            which will represents row/colum in json format. First list element always should be
            structure with row values, second is for column values.
            </remarks>
            <param name="tableSelector">selector, whose column and row values will be converted</param>
            <returns>
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            whose elements represents column and row in json format
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertRowOrColumnToComplexStructure(System.Int32,System.Int32)">
            <summary>
            Converts row or column values to
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>.
            </summary>
            <param name="first">first row/column</param>
            <param name="last">second row/column</param>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.AbstractComplexStructureDTO"/>
            with passed row/column values
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.SelectorXmlV3Mapper.ConvertToStaticOrRangeStructure``1(System.Collections.Generic.IList{``0},System.Func{``0,System.String})">
            <summary>
            Converts passed
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            either in
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.StaticStructureDTO"/>
            or
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO"/>
            according to list
            size.
            </summary>
            <param name="toConvert">list which will be converted to complex structure</param>
            <param name="conversionFunction">conversion function for passed list values</param>
            <typeparam name="T">type of list values</typeparam>
            <returns>
            
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.StaticStructureDTO"/>
            or
            <see cref="T:iText.Pdf2Data.Dto.Json.Selectors.Ranges.RangeStructureDTO"/>
            which will represent passed list
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Templatev3.Xml.Mappers.TemplateXmlV3Mapper">
            <summary>Class for converting template entity classes to proper XmlV3 dto classes.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.TemplateXmlV3Mapper.ConvertTemplateXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.TemplateXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.TemplateXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.TemplateDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Templatev3.Xml.Mappers.TemplateXmlV3Mapper.ConvertDataFieldXmlV3ToJsonDTO(iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3)">
            <summary>
            Converts
            <see cref="T:iText.Pdf2Data.Templatev3.Xml.Dto.DataFieldXmlV3"/>
            to
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO"/>.
            </summary>
            <param name="toConvert">entity, which will be converted</param>
            <returns>
            the instance of
            <see cref="T:iText.Pdf2Data.Dto.Json.Templates.DataFieldDTO"/>
            which represents passed entity
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Template.DataField.#ctor(System.String,iText.Pdf2Data.Structure.Geom.Rectangle,System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.IList{iText.Pdf2Data.Selector.Base.Selector})">
            <summary>Create new dataField object.</summary>
            <param name="name">dataField name</param>
            <param name="rectangle">dataField rectangle on PDF page</param>
            <param name="pageNumber">dataField page number on which rectangle is specified</param>
            <param name="zeroAllowed">whether zero results is valid</param>
            <param name="multiplyAllowed">whether multiple results is valid</param>
            <param name="selectors">dataField selectors</param>
        </member>
        <member name="M:iText.Pdf2Data.Template.DataField.#ctor(System.String,System.String,iText.Pdf2Data.Structure.Geom.Rectangle,System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.IList{iText.Pdf2Data.Selector.Base.Selector})">
            <summary>Create new dataField object.</summary>
            <param name="name">dataField name</param>
            <param name="dataType">dataType of dataField</param>
            <param name="rectangle">dataField location on PDF page</param>
            <param name="pageNumber">dataField page number on which rectangle is specified</param>
            <param name="zeroAllowed">whether zero results is valid</param>
            <param name="multiplyAllowed">whether multiple results is valid</param>
            <param name="selectors">dataField selectors</param>
        </member>
        <member name="M:iText.Pdf2Data.Template.DataField.GetPageNumber">
            <summary>1-based</summary>
        </member>
        <member name="M:iText.Pdf2Data.Template.DataField.SetPageNumber(System.Int32)">
            <summary>1-based</summary>
        </member>
        <member name="M:iText.Pdf2Data.Template.Template.GetMeta">
            <summary>Gets template meta.</summary>
            <returns>template meta</returns>
        </member>
        <member name="M:iText.Pdf2Data.Template.Template.SetMeta(iText.Pdf2Data.Template.TemplateMeta)">
            <summary>Sets meta to template.</summary>
            <param name="meta">meta to set</param>
        </member>
        <member name="M:iText.Pdf2Data.Template.Template.PreserveParsingExceptions(iText.Pdf2Data.Template.Template)">
            <summary>Saves parsing exceptions from passed template object.</summary>
            <param name="preserveFrom">the template from which exceptions will be taken</param>
        </member>
        <member name="M:iText.Pdf2Data.Template.Template.GetDataFieldList(System.Int32)">
            <param name="page">page index (0-based)</param>
            <returns/>
        </member>
        <member name="M:iText.Pdf2Data.Template.TemplateMeta.GetName">
            <summary>Gets template name.</summary>
            <returns>template name</returns>
        </member>
        <member name="M:iText.Pdf2Data.Template.TemplateMeta.GetDescription">
            <summary>Gets template description.</summary>
            <returns>template description</returns>
        </member>
        <member name="M:iText.Pdf2Data.Util.ImageUtil.GetBytes(System.Drawing.Image)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Pdf2Data.Util.ImageUtil.GetImage(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Pdf2Data.Util.ImageUtil.Transform(iText.Pdf2Data.Structure.Image)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Pdf2Data.Util.Impl.Itext7.IText7DocumentHelper.GetPdfDocument(iText.Pdf2Data.DocumentSource,System.String)">
            <summary>
            Creates new
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            from passed
            <see cref="T:iText.Pdf2Data.DocumentSource"/>
            with specified name.
            </summary>
            <param name="source">source from which pdf document will be created</param>
            <param name="outFileName">pdf document name</param>
            <returns>
            new
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            with passed name
            </returns>
        </member>
        <member name="T:iText.Pdf2Data.Util.P2dtaUtil">
            <summary>Utility class for internal usage only.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Util.P2dtaUtil.GetDateInIsoFormat(System.DateTime)">
            <summary>Gets date in ISO-8601 format.</summary>
            <param name="date">date to convert</param>
            <returns>string representing passed date in ISO-8601 format</returns>
        </member>
        <member name="T:iText.Pdf2Data.Util.Pair`2">
            <summary>A convenience class to represent name-value pairs.</summary>
            <typeparam name="K">
            the key of
            <see cref="T:iText.Pdf2Data.Util.Pair`2"/>
            </typeparam>
            <typeparam name="V">
            the value of
            <see cref="T:iText.Pdf2Data.Util.Pair`2"/>
            </typeparam>
            <since>JavaFX 2.0</since>
        </member>
        <member name="F:iText.Pdf2Data.Util.Pair`2.key">
            <summary>Key of this <c>Pair</c>.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Util.Pair`2.GetKey">
            <summary>Gets the key for this pair.</summary>
            <returns>key for this pair</returns>
        </member>
        <member name="F:iText.Pdf2Data.Util.Pair`2.value">
            <summary>Value of this <c>Pair</c>.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Util.Pair`2.GetValue">
            <summary>Gets the value for this pair.</summary>
            <returns>value for this pair</returns>
        </member>
        <member name="M:iText.Pdf2Data.Util.Pair`2.#ctor(`0,`1)">
            <summary>Creates a new pair</summary>
            <param name="key">The key for this pair</param>
            <param name="value">The value to use for this pair</param>
        </member>
        <member name="M:iText.Pdf2Data.Util.Pair`2.ToString">
            <summary>
            <c>String</c> representation of this
            <c>Pair</c>.
            </summary>
            <remarks>
            <c>String</c> representation of this
            <c>Pair</c>.
            <para />
            The default name/value delimiter '=' is always used.
            </remarks>
            <returns><c>String</c> representation of this <c>Pair</c></returns>
        </member>
        <member name="M:iText.Pdf2Data.Util.Pair`2.GetHashCode">
            <summary>Generate a hash code for this <c>Pair</c>.</summary>
            <remarks>
            Generate a hash code for this <c>Pair</c>.
            <para />
            The hash code is calculated using both the name and
            the value of the <c>Pair</c>.
            </remarks>
            <returns>hash code for this <c>Pair</c></returns>
        </member>
        <member name="M:iText.Pdf2Data.Util.PortUtil.GetIsoDatePattern">
            <summary>
            Gets ISO-8601 date pattern.
            </summary>
            <returns>ISO-8601 date pattern</returns>
        </member>
        <member name="M:iText.Pdf2Data.Util.SerializingUtil.Serialize(System.Object,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:iText.Pdf2Data.Util.VersionStringUtil">
            <summary>Class with utils methods for version string processing.</summary>
        </member>
        <member name="M:iText.Pdf2Data.Util.VersionStringUtil.ParseVersionString(System.String)">
            <summary>Parse string containing version for further checking.</summary>
            <param name="versionToParse">string containing version to parse</param>
            <returns>
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            which contains major,minor and patch versions as elements
            or
            <see langword="null"/>
            if the string does not correspond the expected format
            </returns>
        </member>
        <member name="M:iText.Pdf2Data.Util.VersionStringUtil.CompareTwoVersions(System.String,System.String)">
            <summary>Compare two passed string versions.</summary>
            <param name="firstVersion">first version to compare</param>
            <param name="secondVersion">second version to compare</param>
            <returns>
            same as integer comparison. 0 if two versions are equal, value less than 0, if first version is
            numerically less, value greater than 0, if first version is greater
            </returns>
        </member>
    </members>
</doc>
